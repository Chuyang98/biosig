####### Makefile for WIN32 "BioSig for C/C++" #####################
###
###  $Id: Makefile.win32,v 1.3 2009-03-03 11:46:57 schloegl Exp $
###  Copyright (C) 2006,2007,2008,2009 Alois Schloegl <a.schloegl@ieee.org>
###  This file is part of the "BioSig for C/C++" repository 
###  (biosig4c++) at http://biosig.sf.net/ 
###
##############################################################


CC            = $(CXX)
CXX           = g++
MEX	      = mex  # add full path to .../matlab/bin/mex $(MATLABPATH)/bin/mex	
DEFINES       = #-D=WITH_ZLIB #-D=WITH_GSL #-D=WITH_ASN1 #-D=WITH_EEPROBE #-D=SOFTCODED_PHYSDIMTABLE # if you have zlib
CFLAGS        = -pipe -fPIC -Wall -O2 -Wextra $(DEFINES) # -I cntopenlib/include/
CXXFLAGS      = -pipe -fPIC -Wall -O2 -Wextra $(DEFINES) # -I cntopenlib/include/
AR            = ar crs
INCPATH       = 
#LINK          = gcc
LINK          = $(CXX)
#LFLAGS        = -Wl,-subsystem,console # Windows
LFLAGS        =
LIBS          = libbiosig.lib -lws2_32 #win32/libzdll.a	# static, for windows 
#DELETE      = del                    # Windows
DELETE        = del
COPY          = cp
TEMP_DIR      = /tmp/

SWIG          = swig
PYTHONVER     = $(shell python -c "import sys; print sys.version[:3]")
TASN1_DIR     = /home/schloegl/src/libtasn1-1.5/lib/
LIBTASN1      = $(TASN1_DIR).libs/libtasn1.a 

####### Output directory

OBJ	      = ./obj
BIN	      = $(DESTDIR)/usr/bin
LIB	      = $(DESTDIR)/usr/lib

####### Files
SOURCES       = biosig.c \
		XMLParser/tinyxml.cpp \
		XMLParser/tinyxmlparser.cpp \
		XMLParser/tinyxmlerror.cpp \
		XMLParser/tinystr.cpp \
		t210/sopen_scp_read.c \
		t210/sopen_famos_read.c \
		t210/sopen_alpha_read.c \
		t210/scp-decode.cpp \
		t220/sopen_scp_write.c \
		t220/crc4scp.c \
		t230/sopen_hl7aecg.c \
		win32/getlogin_r.c \
		test0/sandbox.c \
		physicalunits.c \
		biosig-network.c \
		biosig_client.c \
		biosig_server.c
		
OBJECTS       = \
		crc4scp.o \
		tinyxml.o \
		tinyxmlparser.o \
		tinyxmlerror.o \
		tinystr.o \
		sopen_scp_read.o \
		sopen_famos_read.o \
		sopen_alpha_read.o \
		scp-decode.o \
		sopen_scp_write.o \
		sopen_hl7aecg.o \
		getlogin_r.o \
		biosig-network.o \
		biosig.o \
		sandbox.o 
		 
		

TARGET        = save2gdf.exe libbiosig.lib libbiosig.dll sigviewer #libbiosig.so 

first: $(TARGET)
all:   $(TARGET) mex sigviewer biosig4python win32 biosig_client biosig_server

####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

.cpp.obj:
	$(MinGWCXX) -c $(MinGWCFLAGS) $(INCPATH) -o "$@" "$<"


####### Compile

biosig.o: biosig.c biosig-dev.h biosig.h 
	$(CC) -c $(CFLAGS) $(INCPATH) -o biosig.o biosig.c

biosig-network.o: biosig-network.c biosig-network.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o biosig-network.o biosig-network.c

physicalunits.o: physicalunits.c biosig.h 
	$(CC) -c $(CFLAGS) $(INCPATH) -o physicalunits.o physicalunits.c

sandbox.o: test0/sandbox.c biosig.h 
	$(CC) -c $(CFLAGS) $(INCPATH) -o sandbox.o test0/sandbox.c

save2gdf.o: save2gdf.c biosig-dev.h biosig.h 
	$(CC) -c $(CFLAGS) $(INCPATH) -o save2gdf.o save2gdf.c

sopen_scp_read.o: t210/sopen_scp_read.c biosig-dev.h biosig.h\
		biosig.h t210/structures.h t210/types.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o sopen_scp_read.o t210/sopen_scp_read.c

sopen_famos_read.o: t210/sopen_famos_read.c biosig-dev.h biosig.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o sopen_famos_read.o t210/sopen_famos_read.c

sopen_alpha_read.o: t210/sopen_alpha_read.c biosig-dev.h biosig.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o sopen_alpha_read.o t210/sopen_alpha_read.c

scp-decode.o: t210/scp-decode.cpp biosig-dev.h biosig.h \
		t210/types.h t210/structures.h t210/codes.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o scp-decode.o t210/scp-decode.cpp

crc4scp.o: t220/crc4scp.c 
	$(CC) -c $(CFLAGS) $(INCPATH) -o crc4scp.o t220/crc4scp.c

sopen_scp_write.o: t220/sopen_scp_write.c biosig-dev.h biosig.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o sopen_scp_write.o t220/sopen_scp_write.c

sopen_hl7aecg.o: t230/sopen_hl7aecg.c biosig-dev.h biosig.h \
		XMLParser/tinyxml.h XMLParser/tinystr.h XMLParser/Tokenizer.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o sopen_hl7aecg.o t230/sopen_hl7aecg.c
	
getlogin_r.o: win32/getlogin_r.c
	$(CC) -c $(CFLAGS) $(INCPATH) -o getlogin_r.o win32/getlogin_r.c

tinystr.o: XMLParser/tinystr.cpp XMLParser/tinystr.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o tinystr.o XMLParser/tinystr.cpp

tinyxml.o: XMLParser/tinyxml.cpp XMLParser/tinyxml.h XMLParser/tinystr.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o tinyxml.o XMLParser/tinyxml.cpp

tinyxmlerror.o: XMLParser/tinyxmlerror.cpp XMLParser/tinyxml.h XMLParser/tinystr.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o tinyxmlerror.o XMLParser/tinyxmlerror.cpp

tinyxmlparser.o: XMLParser/tinyxmlparser.cpp XMLParser/tinyxml.h XMLParser/tinystr.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o tinyxmlparser.o XMLParser/tinyxmlparser.cpp

####### Build rules

biosig4python : _biosig.so biosig.py
biosig.py swig_wrap.cxx : $(SOURCES) libbiosig.lib swig.i 
	$(SWIG) -c++ -python -I/usr/include -o swig_wrap.cxx swig.i
_biosig.so : swig_wrap.cxx 
	$(CXX) -c $(CXXFLAGS) swig_wrap.cxx -o swig_wrap.o -I/usr/include/python$(PYTHONVER) && \
 	$(CXX) -shared swig_wrap.o $(LIBS) -o _biosig.so
 

#$(TARGET):  libbiosig.lib 
#	$(LINK) $(LFLAGS) -o "$(TARGET)" $(LIBS) $(TARGET)

libbiosig.lib: $(OBJECTS)
	$(AR) libbiosig.lib $(OBJECTS) 

libbiosig.dll: $(OBJECTS) win32/zlib/zlib1.dll
	$(CXX) -shared -fPIC  $(OBJECTS) win32/zlib/zlib1.dll -lws2_32 -o libbiosig.dll -Wl,--output-def,libbiosig.def,--out-implib,libbiosig.dll

####### application files 
 
save2gdf.exe: save2gdf.c libbiosig.lib #libbiosig.so 
	$(CXX) $(CXXFLAGS) save2gdf.c $(LFLAGS) $(LIBS) -o save2gdf.exe 

physicalunits.exe: physicalunits.c libbiosig.lib
	$(CXX) $(CXXFLAGS) physicalunits.c $(LFLAGS) $(LIBS) -o physicalunits.exe

bscs: biosig_client biosig_server sandbox.o biosig.omake
biosig_client: biosig_client.c libbiosig.lib biosig-network.o 
	$(CXX) $(CXXFLAGS) biosig_client.c  biosig-network.o $(LFLAGS) $(LIBS) -o biosig_client

biosig_server: biosig_server.c libbiosig.lib biosig-network.o 
	$(CXX) $(CXXFLAGS) biosig_server.c  biosig-network.o $(LFLAGS) $(LIBS) -o biosig_server

win32 exe: save2gdf.exe 

### MEX-files for Matlab
mex: mex4m mex4o
mex4m: mexSLOAD.mexa64 mexSOPEN.mexa64
mexSLOAD: mexSLOAD.mexa64
mexSOPEN: mexSOPEN.mexa64
mexSLOAD.mexa64: mexSLOAD.cpp libbiosig.lib
	$(MEX) mexSLOAD.cpp  $(LIBS) 
	$(COPY) mexSLOAD.mexa64 ../biosig/t200/
mexSOPEN.mexa64: mexSLOAD.cpp libbiosig.lib
	$(MEX) -DmexSOPEN mexSLOAD.cpp  $(LIBS) -output mexSOPEN
	$(COPY) mexSOPEN.mexa64 ../biosig/t200/

### MEX-files for Octave
mex4o:  mexSLOAD.mex mexSOPEN.mex 
mexSLOAD.mex:  mexSLOAD.cpp libbiosig.lib 
	mkoctfile  -v -g --mex mexSLOAD.cpp  $(LIBS) 
mexSOPEN.mex:  mexSLOAD.cpp libbiosig.lib
	mkoctfile  -D=mexSOPEN -v -g --mex mexSLOAD.cpp  $(LIBS) -o mexSOPEN.mex 
#physicalunits.mex:  physicalunits.cpp libbiosig.lib  libbiosig.so 
#	mkoctfile  -v -g --mex physicalunits.cpp  $(LIBS) 

oct:  mexSLOAD.oct
mexSLOAD.oct:  mexSLOAD.cpp libbiosig.lib
	mkoctfile mexSLOAD.cpp $(LFLAGS) $(LIBS) 
	mkoctfile -D=mexSOPEN mexSLOAD.cpp $(LFLAGS) $(LIBS) -o mexSLOAD.mex 


sigviewer: ../sigviewer/bin/sigviewer 
	make -C ../sigviewer/src  
../sigviewer/bin/sigviewer: libbiosig.lib
	copy biosig.h ..\sigviewer\extern\biosig.h
	copy libbiosig.lib ..\sigviewer\extern\libbiosig.a
	make -C ../sigviewer/src  
	
docs: 	docs/save2gdf.txt  docs/mexSLOAD.txt
	asciidoc -d manpage docs/save2gdf.txt   
	asciidoc -d manpage docs/mexSLOAD.txt 


# for backward compatibility 
save2scp: save2gdf
save2aecg: save2gdf

distclean:
	-$(DELETE) *.a
	-$(DELETE) *.o
	-$(DELETE) *.so
	-$(DELETE) *.mex*
	-$(DELETE) *.oct
	-$(DELETE) t5.scp t6.scp save2gdf gztest test_scp_decode biosig_server biosig_client
	-$(DELETE) t?.[bge]df* t?.hl7* t?.scp* t?.cfw* t?.gd1* t?.*.gz *.fil $(TEMP_DIR)t1.*
	-$(DELETE) swig_wrap.* biosig.py 
	-$(DELETE) QMakefile
	-$(DELETE) win32/*.a
	-$(DELETE) win32/*.obj
	-$(DELETE) win32/*.exe
	-$(DELETE) -rf win32/zlib	

clean:		
	-$(DELETE) *~
	-$(DELETE) *.a
	-$(DELETE) *.o
	-$(DELETE) *.so
	-$(DELETE) *.mex*
	-$(DELETE) *.oct
	-$(DELETE) biosig.py*
	-$(DELETE) swig_wrap.*
	-$(DELETE) win32/*.a
	-$(DELETE) win32/*.o
	-$(DELETE) win32/*.obj
	-$(DELETE) win32/*.exe


####### INSTALL ########

install_sigviewer: sigviewer
	install ../sigviewer/bin/sigviewer $(BIN)
	install ../biosig/doc/eventcodes.txt $(BIN)

install_octave: mexSLOAD.mex 
	mkdir -p  		$(DESTDIR)/usr/local/share/octave/site-m/
	install mexSLOAD.mex 	$(DESTDIR)/usr/local/share/octave/site-m/

install: save2gdf libbiosig.so libbiosig.lib doc/save2gdf.1
	install -d 		$(BIN)
	install save2gdf 	$(BIN)
	install save2aecg 	$(BIN)
	install save2scp  	$(BIN)
	#install rec2bin  	$(BIN)
	#install bin2rec  	$(BIN)
	install biosig.h    	$(DESTDIR)/usr/include
	install libbiosig.so 	$(LIB)
	install libbiosig.lib	$(LIB)
	mkdir -p  		$(DESTDIR)/usr/share/man/man1
	install doc/*.1  	$(DESTDIR)/usr/share/man/man1
	#install libbiosig.man $(DESTDIR)/usr/share/
	#make install_sigviewer
	#make install_octave

remove: 
	$(DELETE) $(BIN)/save2gdf
	$(DELETE) $(BIN)/save2scp
	$(DELETE) $(BIN)/save2aecg
	#$(DELETE) $(BIN)/rec2bin
	#$(DELETE) $(BIN)/bin2rec
	$(DELETE) $(BIN)/sigviewer
	$(DELETE) $(BIN)/eventcodes.txt
	$(DELETE) $(DESTDIR)/usr/include/biosig.h
	$(DELETE) $(LIB)/libbiosig.*
	$(DELETE) $(DESTDIR)/usr/share/man/man1/save2gdf.1
	$(DELETE) $(DESTDIR)/usr/share/man/man1/mexSLOAD.1
	$(DELETE) $(DESTDIR)/usr/share/man/man1/sigviewer.1
	#$(DELETE) $(DESTDIR)/usr/share/man/man1/rec2bin.1
	#$(DELETE) $(DESTDIR)/usr/share/man/man1/bin2rec.1
	
:
####### Testing ########
#	save2gdf.exe -V8 ~/data/test/tms32/small_test.float32.log	
	save2gdf.exe -f=TMSi t0.scp t2.log
	cat t2.log	

$(TEMP_DIR)t1.scp: 
	# scp example data sets
	wget  -q -P$(TEMP_DIR) http://www.openecg.net/ECGsamples.zip
	wget  -q -P$(TEMP_DIR) http://www.openecg.net/ECGsamplesc.zip
	unzip -u $(TEMP_DIR)ECGsamples.zip "scp*.zip" -d /tmp
	unzip -u $(TEMP_DIR)ECGsamplesc.zip "scp*.zip" -d /tmp
	mkdir -p $(TEMP_DIR)scp/high
	mkdir -p $(TEMP_DIR)scp/highc
	mkdir -p $(TEMP_DIR)scp/redred
	mkdir -p $(TEMP_DIR)scp/redredc
	unzip -u $(TEMP_DIR)scp_high.zip -d /tmp/scp/high
	unzip -u $(TEMP_DIR)scp_highc.zip -d /tmp/scp/highc
	unzip -u $(TEMP_DIR)scp_redred.zip -d /tmp/scp/redred
	unzip -u $(TEMP_DIR)scp_redredc.zip -d /tmp/scp/redredc
	$(DELETE) $(TEMP_DIR)ECGsamples*.zip 
	$(DELETE) $(TEMP_DIR)scp*.zip 
	$(COPY) $(TEMP_DIR)scp/redred/PFE103.scp /tmp/t1.scp
	touch $(TEMP_DIR)t1.scp

$(TEMP_DIR)t1.hl7:
	# HL7aECG example data set
	wget -q -P$(TEMP_DIR) http://hl7.org/library/committees/rcrim/annecg/aECG%20Release%201%20Schema%20and%20Example%2Ezip
	unzip -u "$(TEMP_DIR)aECG Release 1 Schema and Example.zip"  -d /tmp
	$(COPY) "$(TEMP_DIR)2003-12 Schema/example/Example aECG.xml" /tmp/t1.hl7
	rm -rf "$(TEMP_DIR)aECG Release 1 Schema and Example.zip"
	rm -rf "$(TEMP_DIR)2003-12 Schema"
	touch $(TEMP_DIR)t1.hl7

/tmp/t1.edf:
	# EDF+ example data set
#	wget -q -P/home/schloegl/data/EDF/ http://www.edfplus.info/downloads/files/osas.zip
#	unzip -u "/tmp/osas.zip"  -d /tmp
	unzip -u /home/schloegl/data/test/edf/osas.zip  -d /tmp
	$(COPY) "$(TEMP_DIR)Osas2002plusQRS.edf" /tmp/t1.edf
	touch $(TEMP_DIR)t1.edf

asc: save2gdf 
	save2gdf.exe -f=ASCII t0.xxx t1.asc

bin: save2gdf 
	save2gdf.exe -f=BIN t0.xxx t1.bin

testbin: save2gdf /tmp/t1.edf
	save2gdf.exe -f=BIN /tmp/t1.edf /tmp/t1.hdr
	save2gdf.exe -f=BIN /tmp/t1.hdr /tmp/t2.hdr
	save2gdf.exe -f=GDF /tmp/t2.hdr /tmp/t2.gdf

testscp: save2gdf /tmp/t1.scp
	# test converting SCP data
	save2gdf.exe -f=HL7 $(TEMP_DIR)t1.scp $(TEMP_DIR)t1.scp.hl7
	save2gdf.exe -f=GDF $(TEMP_DIR)t1.scp.hl7 $(TEMP_DIR)t1.scp.hl7.gdf
	save2gdf.exe -f=SCP $(TEMP_DIR)t1.scp.hl7.gdf $(TEMP_DIR)t1.scp.hl7.gdf.scp
	save2gdf.exe -f=GDF $(TEMP_DIR)t1.scp.hl7.gdf.scp $(TEMP_DIR)t1.scp.hl7.gdf.scp.gdf
	save2gdf.exe -f=HL7 $(TEMP_DIR)t1.scp.hl7.gdf.scp.gdf $(TEMP_DIR)t1.scp.hl7.gdf.scp.gdf.hl7
	save2gdf.exe -f=SCP $(TEMP_DIR)t1.scp.hl7.gdf.scp.gdf.hl7 $(TEMP_DIR)t1.scp.hl7.gdf.scp.gdf.hl7.scp
	save2gdf.exe -f=GDF $(TEMP_DIR)t1.scp $(TEMP_DIR)t1.scp.gdf
	save2gdf.exe -f=HL7 $(TEMP_DIR)t1.scp.gdf $(TEMP_DIR)t1.scp.gdf.hl7
	save2gdf.exe -f=SCP $(TEMP_DIR)t1.scp.gdf.hl7 $(TEMP_DIR)t1.scp.gdf.hl7.scp
	save2gdf.exe -f=HL7 $(TEMP_DIR)t1.scp.gdf.hl7.scp $(TEMP_DIR)t1.scp.gdf.hl7.scp.hl7
	save2gdf.exe -f=GDF $(TEMP_DIR)t1.scp.gdf.hl7.scp.hl7 $(TEMP_DIR)t1.scp.gdf.hl7.scp.hl7.gdf
	save2gdf.exe -f=SCP $(TEMP_DIR)t1.scp.gdf.hl7.scp.hl7.gdf $(TEMP_DIR)t1.scp.gdf.hl7.scp.hl7.gdf.scp

testhl7: save2gdf /tmp/t1.hl7
	# test converting HL7aECG data
	save2gdf.exe -f=GDF $(TEMP_DIR)t1.hl7 $(TEMP_DIR)t1.hl7.gdf
	save2gdf.exe -f=SCP $(TEMP_DIR)t1.hl7.gdf $(TEMP_DIR)t1.hl7.gdf.scp
	save2gdf.exe -f=HL7 $(TEMP_DIR)t1.hl7.gdf.scp $(TEMP_DIR)t1.hl7.gdf.scp.hl7
	save2gdf.exe -f=SCP $(TEMP_DIR)t1.hl7.gdf.scp.hl7 $(TEMP_DIR)t1.hl7.gdf.scp.hl7.scp
	save2gdf.exe -f=GDF $(TEMP_DIR)t1.hl7.gdf.scp.hl7.scp $(TEMP_DIR)t1.hl7.gdf.scp.hl7.scp.gdf
	save2gdf.exe -f=HL7 $(TEMP_DIR)t1.hl7.gdf.scp.hl7.scp.gdf $(TEMP_DIR)t1.hl7.gdf.scp.hl7.scp.gdf.hl7
	save2gdf.exe -f=SCP $(TEMP_DIR)t1.hl7 $(TEMP_DIR)t1.hl7.scp
	save2gdf.exe -f=GDF $(TEMP_DIR)t1.hl7.scp $(TEMP_DIR)t1.hl7.scp.gdf
	save2gdf.exe -f=HL7 $(TEMP_DIR)t1.hl7.scp.gdf $(TEMP_DIR)t1.hl7.scp.gdf.hl7
	save2gdf.exe -f=GDF $(TEMP_DIR)t1.hl7.scp.gdf.hl7 $(TEMP_DIR)t1.hl7.scp.gdf.hl7.gdf
	save2gdf.exe -f=SCP $(TEMP_DIR)t1.hl7.scp.gdf.hl7.gdf $(TEMP_DIR)t1.hl7.scp.gdf.hl7.gdf.scp
	save2gdf.exe -f=HL7 $(TEMP_DIR)t1.hl7.scp.gdf.hl7.gdf.scp $(TEMP_DIR)t1.hl7.scp.gdf.hl7.gdf.scp.hl7

test: $(TEMP_DIR)t1.scp save2scp save2aecg save2gdf 
	# biosig4python
	# includes test for on-the-fly compression and decompression 
	save2gdf.exe 	  	$(TEMP_DIR)t1.scp     $(TEMP_DIR)t1.scp.gdf
	save2gdf -f=SCP  	$(TEMP_DIR)t1.scp     $(TEMP_DIR)t1.scp.scp
	save2gdf.exe -f=HL7  	$(TEMP_DIR)t1.scp     $(TEMP_DIR)t1.scp.hl7
	save2gdf.exe 		$(TEMP_DIR)t1.scp.gdf $(TEMP_DIR)t1.scp.gdf.gdf
	save2gdf.exe 		$(TEMP_DIR)t1.scp.scp $(TEMP_DIR)t1.scp.scp.gdf  
	save2gdf.exe 		$(TEMP_DIR)t1.scp.hl7 $(TEMP_DIR)t1.scp.hl7.gdf
	save2gdf -f=SCP 	$(TEMP_DIR)t1.scp.gdf $(TEMP_DIR)t1.scp.gdf.scp
	save2gdf -f=SCP 	$(TEMP_DIR)t1.scp.scp $(TEMP_DIR)t1.scp.scp.scp  
	save2gdf -f=SCP 	$(TEMP_DIR)t1.scp.hl7 $(TEMP_DIR)t1.scp.hl7.scp
	save2gdf.exe -f=HL7 	$(TEMP_DIR)t1.scp.gdf $(TEMP_DIR)t1.scp.gdf.hl7
	save2gdf.exe -f=HL7	$(TEMP_DIR)t1.scp.scp $(TEMP_DIR)t1.scp.scp.hl7  
	save2gdf.exe -f=HL7	$(TEMP_DIR)t1.scp.hl7 $(TEMP_DIR)t1.scp.hl7.hl7
	# python test.py

zip: /tmp/t1.scp save2gdf
	# test for on-the-fly compression and decompression 
	# on-the-fly compression of output file 
	save2gdf.exe -z -f=GDF /tmp/t1.scp t1.gdf
	save2gdf.exe -z -f=GDF1 /tmp/t1.scp t1.gd1
	save2gdf.exe -z -f=EDF /tmp/t1.scp t1.edf
	save2gdf.exe -z -f=BDF /tmp/t1.scp t1.bdf
	save2gdf.exe -z -f=SCP /tmp/t1.scp t1.scp
	save2gdf.exe -z -f=HL7 /tmp/t1.scp t1.hl7
	save2gdf.exe -z -f=CFW /tmp/t1.scp t1.cfw
	save2gdf.exe -z -f=MFER /tmp/t1.scp t1.mwf

	gzip -c /tmp/t1.scp >/tmp/t1.scp.gz 
	# on-the-fly decompression of input file 
	save2gdf.exe -f=GDF /tmp/t1.scp.gz t1.gdf
	save2gdf.exe -f=EDF /tmp/t1.scp.gz t1.edf
	save2gdf.exe -f=BDF /tmp/t1.scp.gz t1.bdf
	save2gdf.exe -f=SCP /tmp/t1.scp.gz t1.scp
	save2gdf.exe -f=HL7 /tmp/t1.scp.gz t1.hl7
	save2gdf.exe -f=CFW /tmp/t1.scp.gz t1.cfw

test6: /tmp/t1.scp save2gdf
	$(COPY) /tmp/t1.scp t0.xxx
	#test7: /tmp/t1.edf save2gdf
	#$(COPY) /tmp/t1.edf t0.xxx
	save2gdf.exe -f=GDF1 t0.xxx t1.gd1
	save2gdf.exe -f=GDF t0.xxx t1.gdf
	save2gdf.exe -f=EDF t0.xxx t1.edf
	save2gdf.exe -f=BDF t0.xxx t1.bdf
	save2gdf.exe -f=SCP t0.xxx t1.scp
	save2gdf.exe -f=HL7 t0.xxx t1.hl7   # -z not supported for HL7
	save2gdf.exe -f=CFWB t0.xxx t1.cfw
	save2gdf.exe -f=MFER t0.xxx t1.mwf
	save2gdf.exe -f=BVA t0.xxx t1.bva
	save2gdf.exe -f=GDF1 t1.gd1 t2.gd1.gd1
	save2gdf.exe -f=GDF t1.gd1 t2.gd1.gdf
	save2gdf.exe -f=EDF t1.gd1 t2.gd1.edf
	save2gdf.exe -f=BDF t1.gd1 t2.gd1.bdf
	save2gdf.exe -f=SCP t1.gd1 t2.gd1.scp
	save2gdf.exe -f=HL7 t1.gd1 t2.gd1.hl7
	save2gdf.exe -f=CFWB t1.gd1 t2.gd1.cfw
	save2gdf.exe -f=GDF1 t1.gdf t2.gdf.gd1
	save2gdf.exe -f=GDF t1.gdf t2.gdf.gdf
	save2gdf.exe -f=EDF t1.gdf t2.gdf.edf
	save2gdf.exe -f=BDF t1.gdf t2.gdf.bdf
	save2gdf.exe -f=SCP t1.gdf t2.gdf.scp
	save2gdf.exe -f=HL7 t1.gdf t2.gdf.hl7
	save2gdf.exe -f=CFWB t1.gdf t2.gdf.cfw
	save2gdf.exe -f=GDF1 t1.edf t2.edf.gd1
	save2gdf.exe -f=GDF t1.edf t2.edf.gdf
	save2gdf.exe -f=EDF t1.edf t2.edf.edf
	save2gdf.exe -f=BDF t1.edf t2.edf.bdf
	save2gdf.exe -f=SCP t1.edf t2.edf.scp
	save2gdf.exe -f=HL7 t1.edf t2.edf.hl7
	save2gdf.exe -f=CFWB t1.edf t2.edf.cfw
	save2gdf.exe -f=GDF1 t1.bdf t2.bdf.gd1
	save2gdf.exe -f=GDF t1.bdf t2.bdf.gdf
	save2gdf.exe -f=EDF t1.bdf t2.bdf.edf
	save2gdf.exe -f=BDF t1.bdf t2.bdf.bdf
	save2gdf.exe -f=SCP t1.bdf t2.bdf.scp
	save2gdf.exe -f=HL7 t1.bdf t2.bdf.hl7
	save2gdf.exe -f=CFWB t1.bdf t2.bdf.cfw
	save2gdf.exe -f=GDF1 t1.scp t2.scp.gd1
	save2gdf.exe -f=GDF t1.scp t2.scp.gdf
	save2gdf.exe -f=EDF t1.scp t2.scp.edf
	save2gdf.exe -f=BDF t1.scp t2.scp.bdf
#	save2gdf.exe -f=SCP t1.scp t2.scp.scp
	save2gdf.exe -f=HL7 t1.scp t2.scp.hl7
	save2gdf.exe -f=CFWB t1.scp t2.scp.cfw
	save2gdf.exe -f=GDF1 t1.hl7    t2.hl7.gd1
	save2gdf.exe -f=GDF t1.hl7    t2.hl7.gdf
	save2gdf.exe -f=EDF t1.hl7    t2.hl7.edf
	save2gdf.exe -f=BDF t1.hl7    t2.hl7.bdf
	save2gdf.exe -f=SCP t1.hl7    t2.hl7.scp
	save2gdf.exe -f=HL7 t1.hl7    t2.hl7.hl7
	save2gdf.exe -f=CFWB t1.hl7    t2.hl7.cfw
	save2gdf.exe -f=GDF1 t1.cfw t2.cfw.gd1
	save2gdf.exe -f=GDF t1.cfw t2.cfw.gdf
	save2gdf.exe -f=EDF t1.cfw t2.cfw.edf
	save2gdf.exe -f=BDF t1.cfw t2.cfw.bdf
	save2gdf.exe -f=SCP t1.cfw t2.cfw.scp
	save2gdf.exe -f=HL7 t1.cfw t2.cfw.hl7

	save2gdf.exe -f=GDF1 t1.mwf t2.mwf.gd1
	save2gdf.exe -f=GDF t1.mwf t2.mwf.gdf
	save2gdf.exe -f=EDF t1.mwf t2.mwf.edf
	save2gdf.exe -f=BDF t1.mwf t2.mwf.bdf
	save2gdf.exe -f=SCP t1.mwf t2.mwf.scp
	save2gdf.exe -f=HL7 t1.mwf t2.mwf.hl7

testpybdf : /tmp/BDFtestfiles.zip
	unzip -u /tmp/BDFtestfiles.zip -d /tmp && \
	python example.py /tmp/*-256.bdf 256 && \
	python example.py /tmp/*-2048.bdf 2048

/tmp/BDFtestfiles.zip :
	wget -P/tmp http://www.biosemi.com/download/BDFtestfiles.zip
