/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGTCL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdio.h>
#include <tcl.h>
#include <errno.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Tcl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}


SWIGINTERN void
SWIG_Tcl_SetErrorObj(Tcl_Interp *interp, const char *ctype, Tcl_Obj *obj)
{
  Tcl_ResetResult(interp);
  Tcl_SetObjResult(interp, obj);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
}

SWIGINTERN void
SWIG_Tcl_SetErrorMsg(Tcl_Interp *interp, const char *ctype, const char *mesg)
{
  Tcl_ResetResult(interp);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
  Tcl_AppendResult(interp, ctype, " ", mesg, NULL);
  /*
  Tcl_AddErrorInfo(interp, ctype);
  Tcl_AddErrorInfo(interp, " ");
  Tcl_AddErrorInfo(interp, mesg);
  */
}

SWIGINTERNINLINE void
SWIG_Tcl_AddErrorMsg(Tcl_Interp *interp, const char* mesg)
{
  Tcl_AddErrorInfo(interp, mesg);
}



/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  const char              **base_names;
  swig_module_info   *module;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* -----------------------------------------------------------------------------*
 *  Install a constant object 
 * -----------------------------------------------------------------------------*/

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

SWIGINTERN void
SWIG_Tcl_SetConstantObj(Tcl_Interp *interp, const char* name, Tcl_Obj *obj) {
  int newobj;
  Tcl_ObjSetVar2(interp,Tcl_NewStringObj(name,-1), NULL, obj, TCL_GLOBAL_ONLY);
  Tcl_SetHashValue(Tcl_CreateHashEntry(&swigconstTable, name, &newobj), (ClientData) obj);
}

SWIGINTERN Tcl_Obj *
SWIG_Tcl_GetConstantObj(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  return 0;
}

#ifdef __cplusplus
}
#endif



/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * tclrun.swg
 *
 * This file contains the runtime support for Tcl modules and includes
 * code for managing global variables and pointer type checking.
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(oc, ptr, ty, flags)             SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Tcl_NewPointerObj(ptr, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Tcl_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp,obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Tcl_GetModule((Tcl_Interp *) (clientdata))	     
#define SWIG_SetModule(clientdata, pointer)          	SWIG_Tcl_SetModule((Tcl_Interp *) (clientdata), pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Tcl_ErrorType(code)                                      
#define SWIG_Error(code, msg)            		SWIG_Tcl_SetErrorMsg(interp, SWIG_Tcl_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    


/* Tcl-specific SWIG API */

#define SWIG_Acquire(ptr)                               SWIG_Tcl_Acquire(ptr)                                     
#define SWIG_MethodCommand                           	SWIG_Tcl_MethodCommand				       
#define SWIG_Disown(ptr)                             	SWIG_Tcl_Disown(ptr)				       
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) 	SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)  
#define SWIG_MakePtr(c, ptr, ty, flags)              	SWIG_Tcl_MakePtr(c, ptr, ty, flags)		       
#define SWIG_PointerTypeFromString(c)                	SWIG_Tcl_PointerTypeFromString(c)			       
#define SWIG_GetArgs                                 	SWIG_Tcl_GetArgs					       
#define SWIG_GetConstantObj(key)                     	SWIG_Tcl_GetConstantObj(key)			       
#define SWIG_ObjectConstructor                       	SWIG_Tcl_ObjectConstructor				       
#define SWIG_Thisown(ptr)                            	SWIG_Tcl_Thisown(ptr)				       
#define SWIG_ObjectDelete                            	SWIG_Tcl_ObjectDelete				       


#define SWIG_TCL_DECL_ARGS_2(arg1, arg2)                (Tcl_Interp *interp SWIGUNUSED, arg1, arg2)
#define SWIG_TCL_CALL_ARGS_2(arg1, arg2)                (interp, arg1, arg2)
/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_GetConstant        SWIG_GetConstantObj
#define SWIG_Tcl_GetConstant    SWIG_Tcl_GetConstantObj

#include "assert.h"

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* Object support */

SWIGRUNTIME Tcl_HashTable*
SWIG_Tcl_ObjectTable(void) {
  static Tcl_HashTable  swigobjectTable;
  static int            swigobjectTableinit = 0;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  return &swigobjectTable;
}

/* Acquire ownership of a pointer */
SWIGRUNTIME void
SWIG_Tcl_Acquire(void *ptr) {
  int newobj;
  Tcl_CreateHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr, &newobj);
}

SWIGRUNTIME int
SWIG_Tcl_Thisown(void *ptr) {
  if (Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
SWIGRUNTIME int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr = Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return SWIG_OK;

    /* Empty string: not a pointer */
    if (*c == 0) return SWIG_ERROR; 

    /* Hmmm. It could be an object name. */

    /* Check if this is a command at all. Prevents <c> cget -this         */
    /* from being called when c is not a command, firing the unknown proc */
    if (Tcl_VarEval(interp,"info commands ", c, (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      if (*(Tcl_GetStringFromObj(result, NULL)) == 0) {
        /* It's not a command, so it can't be a pointer */
        Tcl_ResetResult(interp);
        return SWIG_ERROR;
      }
    } else {
      /* This will only fail if the argument is multiple words. */
      /* Multiple words are also not commands.                  */
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    /* Check if this is really a SWIG pointer */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) != TCL_OK) {
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    c = Tcl_GetStringFromObj(Tcl_GetObjResult(interp), NULL);
  }

  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = c ? SWIG_TypeCheck(c,ty) : 0;
    if (!tc) {
      return SWIG_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,(void *) *ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  }
  return SWIG_OK;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
SWIGRUNTIME char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:

  return SWIG_ERROR;
}


/* Take a pointer and convert it to a string */
SWIGRUNTIME void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,(char *)"NULL");
  }
  flags = 0;
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[SWIG_BUFFER_SIZE];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return Tcl_NewStringObj(result,-1);
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

SWIGRUNTIME swig_module_info * 
SWIG_Tcl_GetModule(Tcl_Interp *interp) {
  const char *data;
  swig_module_info *ret = 0;
  
  /* first check if pointer already created */
  data = Tcl_GetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &ret, sizeof(swig_type_info **));
  }

  return ret;
}

SWIGRUNTIME void
SWIG_Tcl_SetModule(Tcl_Interp *interp, swig_module_info *module) {
  char buf[SWIG_BUFFER_SIZE];
  char *data;

  /* create a new pointer */
  data = SWIG_PackData(buf, &module, sizeof(swig_type_info **));
  *data = 0;
  Tcl_SetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, 0);
}

/* -----------------------------------------------------------------------------*
 *  Object auxiliars
 * -----------------------------------------------------------------------------*/


SWIGRUNTIME void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if ((si) && (si->destroy) && (SWIG_Disown(si->thisvalue))) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
SWIGRUNTIME int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  cls = inst->classptr;
  while (1) {
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQueryModule(cls->module, cls->module, cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    meth = cls->methods;
    /* Check for methods */
    while (meth && meth->name) {
      if (strcmp(meth->name,method) == 0) {
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (*meth->method)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
      }
      meth++;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
    Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
    return TCL_ERROR;
  }
  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      size_t meth_len = strlen(meth->name);
      char* where = strchr(cr,':');
      while(where) {
        where = strstr(where, meth->name);
        if(where) {
          if(where[-1] == ' ' && (where[meth_len] == ' ' || where[meth_len]==0)) {
            break;
          } else {
            where++;
          }
        }
      }

      if (!where)
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* This function takes the current result and turns it into an object command */
SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if ((type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Function to create objects */
SWIGRUNTIME int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj          *newObj = 0;
  void             *thisvalue = 0;
  swig_instance   *newinst = 0;
  swig_class      *classptr = (swig_class *) clientData;
  swig_wrapper     cons = 0;
  char             *name = 0;
  int               firstarg = 0;
  int               thisarg = 0;
  int               destroy = 1;

  if (!classptr) {
    Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
    return TCL_ERROR;
  }
  cons = classptr->constructor;
  if (objc > 1) {
    char *s = Tcl_GetStringFromObj(objv[1],NULL);
    if (strcmp(s,"-this") == 0) {
      thisarg = 2;
      cons = 0;
    } else if (strcmp(s,"-args") == 0) {
      firstarg = 1;
    } else if (objc == 2) {
      firstarg = 1;
      name = s;
    } else if (objc >= 3) {
      char *s1;
      name = s;
      s1 = Tcl_GetStringFromObj(objv[2],NULL);
      if (strcmp(s1,"-this") == 0) {
	thisarg = 3;
	cons = 0;
      } else {
	firstarg = 1;
      }
    }
  }
  if (cons) {
    int result;
    result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
    if (result != TCL_OK) {
      return result;
    }
    newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
    if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
  } else if (thisarg > 0) {
    if (thisarg < objc) {
      destroy = 0;
      newObj = Tcl_DuplicateObj(objv[thisarg]);
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else {
      Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
      return TCL_ERROR;
    }
  } else {
    Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
    return TCL_ERROR;
  }
  if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), 0) != SWIG_OK) {
    Tcl_DecrRefCount(newObj);
    return TCL_ERROR;
  }
  newinst = (swig_instance *) malloc(sizeof(swig_instance));
  newinst->thisptr = newObj;
  Tcl_IncrRefCount(newObj);
  newinst->thisvalue = thisvalue;
  newinst->classptr = classptr;
  newinst->destroy = destroy;
  if (destroy) {
    SWIG_Acquire(thisvalue);
  }
  newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
  return TCL_OK;
}

/* -----------------------------------------------------------------------------*
 *   Get arguments 
 * -----------------------------------------------------------------------------*/
SWIGRUNTIME int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong number of arguments ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_Tcl_GetConstantObj(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, 0) != SWIG_OK) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CHANNEL_TYPE swig_types[0]
#define SWIGTYPE_p_FILE swig_types[1]
#define SWIGTYPE_p_HDRTYPE swig_types[2]
#define SWIGTYPE_p_HDRTYPE_AS swig_types[3]
#define SWIGTYPE_p_HDRTYPE_ELEC swig_types[4]
#define SWIGTYPE_p_HDRTYPE_EVENT swig_types[5]
#define SWIGTYPE_p_HDRTYPE_FILE swig_types[6]
#define SWIGTYPE_p_HDRTYPE_FLAG swig_types[7]
#define SWIGTYPE_p_HDRTYPE_ID swig_types[8]
#define SWIGTYPE_p_HDRTYPE_ID_Manufacturer swig_types[9]
#define SWIGTYPE_p_HDRTYPE_Patient swig_types[10]
#define SWIGTYPE_p_HDRTYPE_Patient_Impairment swig_types[11]
#define SWIGTYPE_p_HDRTYPE_data swig_types[12]
#define SWIGTYPE_p_biosig_data_type swig_types[13]
#define SWIGTYPE_p_char swig_types[14]
#define SWIGTYPE_p_float swig_types[15]
#define SWIGTYPE_p_imaxdiv_t swig_types[16]
#define SWIGTYPE_p_int swig_types[17]
#define SWIGTYPE_p_long_long swig_types[18]
#define SWIGTYPE_p_p_biosig_data_type swig_types[19]
#define SWIGTYPE_p_p_char swig_types[20]
#define SWIGTYPE_p_short swig_types[21]
#define SWIGTYPE_p_signed_char swig_types[22]
#define SWIGTYPE_p_size_t swig_types[23]
#define SWIGTYPE_p_unsigned_char swig_types[24]
#define SWIGTYPE_p_unsigned_int swig_types[25]
#define SWIGTYPE_p_unsigned_long_long swig_types[26]
#define SWIGTYPE_p_unsigned_short swig_types[27]
#define SWIGTYPE_p_void swig_types[28]
static swig_type_info *swig_types[30];
static swig_module_info swig_module = {swig_types, 29, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Biosig_Init
#define SWIG_name    "biosig"
#define SWIG_prefix  ""
#define SWIG_version "0.0"

#define SWIGVERSION 0x010340 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>



#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT int SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif

/* Compatibility version for TCL stubs */
#ifndef SWIG_TCL_STUBS_VERSION
#define SWIG_TCL_STUBS_VERSION "8.1"
#endif



#include "../biosig.h"


#include <inttypes.h>


#include <stdint.h>		// Use the C99 official header


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#include <stdlib.h>
#ifdef _MSC_VER
# ifndef strtoull
#  define strtoull _strtoui64
# endif
# ifndef strtoll
#  define strtoll _strtoi64
# endif
#endif


SWIGINTERN int
SWIG_AsVal_long_SS_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, long long *val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = v;
    return SWIG_OK;
  } else {
    int len = 0;
    const char *nptr = Tcl_GetStringFromObj(obj, &len);
    if (nptr && len > 0) {
      char *endptr;
      long long v;
      errno = 0;
      v = strtoll(nptr, &endptr,0);
      if (nptr[0] == '\0' || *endptr != '\0')
	return SWIG_TypeError;
      if ((v == LLONG_MAX || v == LLONG_MIN) && errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_OK;
	}
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long  (long value)
{
  if (((long) INT_MIN <= value) && (value <= (long) INT_MAX)) {
    return Tcl_NewIntObj(static_cast< int >(value));
  } else {
    return Tcl_NewLongObj(value);
  }
}


#include <stdio.h>
#if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
# ifndef snprintf
#  define snprintf _snprintf
# endif
#endif


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long_SS_long  (long long value)
{
  if (((long long) LONG_MIN <= value) && (value <= (long long) LONG_MAX)) {
    return SWIG_From_long  (static_cast< long >(value));
  } else {    
    char temp[256]; 
    sprintf(temp, "%lld", value);
    return Tcl_NewStringObj(temp,-1);
  }
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Tcl_Obj *obj, char** cptr, size_t* psize, int *alloc)
{ 
  int len = 0;
  char *cstr = Tcl_GetStringFromObj(obj, &len);
  if (cstr) {
    if (cptr)  *cptr = cstr;
    if (psize) *psize = len + 1;
    if (alloc) *alloc = SWIG_OLDOBJ;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}





SWIGINTERN int
SWIG_AsVal_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, long* val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = (long) v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  if (value < (unsigned long long) LONG_MAX) {
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  } else {
    char temp[256]; 
    sprintf(temp, "%llu", value);
    return Tcl_NewStringObj(temp,-1);
  }
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_double SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, double *val)
{
  double v;
  if (Tcl_GetDoubleFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   Tcl_NewDoubleObj 


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, unsigned long *val) {
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (v >= 0) {
      if (val) *val = (unsigned long) v;
      return SWIG_OK;
    }
    /* If v is negative, then this could be a negative number, or an
       unsigned value which doesn't fit in a signed long, so try to
       get it as a string so we can distinguish these cases. */
  }
  {
    int len = 0;
    const char *nptr = Tcl_GetStringFromObj(obj, &len);
    if (nptr && len > 0) {
      char *endptr;
      unsigned long v;
      if (*nptr == '-') return SWIG_OverflowError;
      errno = 0;
      v = strtoul(nptr, &endptr,0);
      if (nptr[0] == '\0' || *endptr != '\0')
	return SWIG_TypeError;
      if (v == ULONG_MAX && errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_OK;
	}
      }
    }
  }
  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  if (value < (unsigned long) LONG_MAX) {
    return SWIG_From_long  (static_cast< long >(value));
  } else {
    char temp[256]; 
    sprintf(temp, "%lu", value);
    return Tcl_NewStringObj(temp,-1);
  }
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsCharArray(Tcl_Obj * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return (size < INT_MAX) ? Tcl_NewStringObj(carray, static_cast< int >(size)) : NULL;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


#include <float.h>


SWIGINTERN int
SWIG_AsVal_float SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE Tcl_Obj * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsVal_short SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


typedef struct {
                                                                  
                                                 
                                                 

		uint32_t 	bpb;  		                           
		uint32_t 	bpb8;  		                          
		uint8_t*	Header; 
		uint8_t*	rawEventData;
		uint8_t*	rawdata; 	                    
		char		flag_collapsed_rawdata;                                                   
		nrec_t		first;		                                                                        
		nrec_t		length;		                                         
		uint8_t*	auxBUF;		                                                                       
		char*		bci2000;
	} HDRTYPE_AS;



typedef struct {	                         






		FILE* 		FID;		                  
		size_t 		POS;		                                                  
                                    
		uint8_t		OPEN; 		                                 
		uint8_t		LittleEndian;
		uint8_t		COMPRESSION;                                              
                                           
	} HDRTYPE_FILE;



typedef struct {	           
		char		OVERFLOWDETECTION; 	                                                    
		char		UCAL; 		                                                                   
		char		ANONYMOUS; 	                                                         
		char		ROW_BASED_CHANNELS;	                                                        
		char		TARGETSEGMENT;                                                                                           
	} HDRTYPE_FLAG;



typedef struct {
		double  	SampleRate;	                                              
		uint32_t  	N;	                      
		uint16_t 	*TYP;	                                                                                                    
		uint32_t 	*POS;	                                    
		uint32_t 	*DUR;	                           
		uint16_t 	*CHN;	                                      
		char		**CodeDesc;	                                                                                
		uint16_t	LenCodeDesc;	                              
	} HDRTYPE_EVENT;



typedef struct {
		float		REF[3];	                                         
		float		GND[3];	                                      
	} HDRTYPE_ELEC;



typedef struct {
		char		Recording[MAX_LENGTH_RID+1]; 	                                            
		char 		Technician[MAX_LENGTH_TECHNICIAN+1];
		char* 		Hospital; 	
		uint64_t 	Equipment; 	                              
		struct {
			                                                                                                                                                                                    	
                                                  
			char*	Name;  
			char*	Model;
			char*	Version;
			char*	SerialNumber;
		} Manufacturer;  
	} HDRTYPE_ID;



typedef struct {
		char		Name[MAX_LENGTH_NAME+1];                                                                                                              
                                                                                                                              
		char		Id[MAX_LENGTH_PID+1];	                                                                      
		uint8_t		Weight;		                                                       
		uint8_t		Height;		                                                        
		                                                            
		gdf_time 	Birthday; 	                         
		                                                                                                   
		uint16_t	Headsize[3]; 	                                                                     
		                            
		int	 	Sex;		                                    
		int		Handedness;	                                            
		int		Smoking;	                              
		int		AlcoholAbuse;	                              
		int		DrugAbuse;	                              
		int		Medication;	                              
		struct {
			int 	Visual;		                                            
			int 	Heart;		                                            
		} Impairment;
		
	} HDRTYPE_Patient;



typedef struct {
		size_t 			size[2];                                          
		biosig_data_type* 	block; 	                 
	} HDRTYPE_data;



SWIGINTERN int
SWIG_AsVal_char SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, unsigned long long *val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = (unsigned long) v;
    return SWIG_OK;
  } else {
    int len = 0;
    const char *nptr = Tcl_GetStringFromObj(obj, &len);
    if (nptr && len > 0) {
      char *endptr;
      unsigned long long v;
      if (*nptr == '-') return SWIG_OverflowError;
      errno = 0;
      v = strtoull(nptr, &endptr,0);
      if (nptr[0] == '\0' || *endptr != '\0')
	return SWIG_TypeError;
      if (v == ULLONG_MAX && errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_OK;
	}
      }
    }
  }
  return SWIG_TypeError;
}


typedef struct {
			                                                                                                                                                                                    	
                                                  
			char*	Name;  
			char*	Model;
			char*	Version;
			char*	SerialNumber;
		} HDRTYPE_ID_Manufacturer;



typedef struct {
			int 	Visual;		                                            
			int 	Heart;		                                            
		} HDRTYPE_Patient_Impairment;



	void hdr2ascii(HDRTYPE* hdr, int verbosity)
	{
		hdr2ascii(hdr, stdout, verbosity);
        }

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int
_wrap_imaxdiv_t_quot_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:imaxdiv_t_quot_set self quot ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_imaxdiv_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "imaxdiv_t_quot_set" "', argument " "1"" of type '" "imaxdiv_t *""'"); 
  }
  arg1 = reinterpret_cast< imaxdiv_t * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "imaxdiv_t_quot_set" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  if (arg1) (arg1)->quot = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_imaxdiv_t_quot_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:imaxdiv_t_quot_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_imaxdiv_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "imaxdiv_t_quot_get" "', argument " "1"" of type '" "imaxdiv_t *""'"); 
  }
  arg1 = reinterpret_cast< imaxdiv_t * >(argp1);
  result = (long long) ((arg1)->quot);
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_imaxdiv_t_rem_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:imaxdiv_t_rem_set self rem ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_imaxdiv_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "imaxdiv_t_rem_set" "', argument " "1"" of type '" "imaxdiv_t *""'"); 
  }
  arg1 = reinterpret_cast< imaxdiv_t * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "imaxdiv_t_rem_set" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  if (arg1) (arg1)->rem = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_imaxdiv_t_rem_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:imaxdiv_t_rem_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_imaxdiv_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "imaxdiv_t_rem_get" "', argument " "1"" of type '" "imaxdiv_t *""'"); 
  }
  arg1 = reinterpret_cast< imaxdiv_t * >(argp1);
  result = (long long) ((arg1)->rem);
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_imaxdiv_t(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  imaxdiv_t *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_imaxdiv_t ") == TCL_ERROR) SWIG_fail;
  result = (imaxdiv_t *)new imaxdiv_t();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_imaxdiv_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_imaxdiv_t(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_imaxdiv_t self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_imaxdiv_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_imaxdiv_t" "', argument " "1"" of type '" "imaxdiv_t *""'"); 
  }
  arg1 = reinterpret_cast< imaxdiv_t * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_imaxdiv_t(void *obj) {
imaxdiv_t *arg1 = (imaxdiv_t *) obj;
delete arg1;
}
static swig_method swig_imaxdiv_t_methods[] = {
    {0,0}
};
static swig_attribute swig_imaxdiv_t_attributes[] = {
    { "-quot",_wrap_imaxdiv_t_quot_get, _wrap_imaxdiv_t_quot_set},
    { "-rem",_wrap_imaxdiv_t_rem_get, _wrap_imaxdiv_t_rem_set},
    {0,0,0}
};
static swig_class *swig_imaxdiv_t_bases[] = {0};
static const char * swig_imaxdiv_t_base_names[] = {0};
static swig_class _wrap_class_imaxdiv_t = { "imaxdiv_t", &SWIGTYPE_p_imaxdiv_t,_wrap_new_imaxdiv_t, swig_delete_imaxdiv_t, swig_imaxdiv_t_methods, swig_imaxdiv_t_attributes, swig_imaxdiv_t_bases,swig_imaxdiv_t_base_names, &swig_module };
SWIGINTERN int
_wrap_imaxabs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  intmax_t arg1 ;
  long long val1 ;
  int ecode1 = 0 ;
  intmax_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:imaxabs n ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "imaxabs" "', argument " "1"" of type '" "intmax_t""'");
  } 
  arg1 = static_cast< intmax_t >(val1);
  result = (intmax_t)imaxabs(arg1);
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_imaxdiv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  intmax_t arg1 ;
  intmax_t arg2 ;
  long long val1 ;
  int ecode1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  imaxdiv_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:imaxdiv numer denom ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "imaxdiv" "', argument " "1"" of type '" "intmax_t""'");
  } 
  arg1 = static_cast< intmax_t >(val1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "imaxdiv" "', argument " "2"" of type '" "intmax_t""'");
  } 
  arg2 = static_cast< intmax_t >(val2);
  result = imaxdiv(arg1,arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new imaxdiv_t(static_cast< const imaxdiv_t& >(result))), SWIGTYPE_p_imaxdiv_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_strtoimax(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  intmax_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:strtoimax nptr endptr base ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "strtoimax" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "strtoimax" "', argument " "2"" of type '" "char **""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "strtoimax" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (intmax_t)strtoimax((char const *)arg1,arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_strtoumax(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  uintmax_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:strtoumax nptr endptr base ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "strtoumax" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "strtoumax" "', argument " "2"" of type '" "char **""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "strtoumax" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (uintmax_t)strtoumax((char const *)arg1,arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_PhysMin_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_PhysMin_set self PhysMin ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_PhysMin_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHANNEL_TYPE_PhysMin_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->PhysMin = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_PhysMin_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_PhysMin_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_PhysMin_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (double) ((arg1)->PhysMin);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_PhysMax_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_PhysMax_set self PhysMax ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_PhysMax_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHANNEL_TYPE_PhysMax_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->PhysMax = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_PhysMax_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_PhysMax_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_PhysMax_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (double) ((arg1)->PhysMax);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_DigMin_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_DigMin_set self DigMin ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_DigMin_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHANNEL_TYPE_DigMin_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->DigMin = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_DigMin_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_DigMin_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_DigMin_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (double) ((arg1)->DigMin);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_DigMax_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_DigMax_set self DigMax ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_DigMax_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHANNEL_TYPE_DigMax_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->DigMax = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_DigMax_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_DigMax_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_DigMax_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (double) ((arg1)->DigMax);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_Cal_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_Cal_set self Cal ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_Cal_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHANNEL_TYPE_Cal_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Cal = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_Cal_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_Cal_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_Cal_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (double) ((arg1)->Cal);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_Off_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_Off_set self Off ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_Off_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHANNEL_TYPE_Off_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Off = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_Off_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_Off_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_Off_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (double) ((arg1)->Off);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_OnOff_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_OnOff_set self OnOff ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_OnOff_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHANNEL_TYPE_OnOff_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->OnOff = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_OnOff_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_OnOff_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_OnOff_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (uint8_t) ((arg1)->OnOff);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_Label_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[MAX_LENGTH_LABEL+1] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_Label_set self Label ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_Label_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, MAX_LENGTH_LABEL+1);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CHANNEL_TYPE_Label_set" "', argument " "2"" of type '" "char [MAX_LENGTH_LABEL+1]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->Label,arg2,MAX_LENGTH_LABEL+1*sizeof(char));
  else memset(arg1->Label,0,MAX_LENGTH_LABEL+1*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_Label_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_Label_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_Label_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (char *)(char *) ((arg1)->Label);
  {
    size_t size = MAX_LENGTH_LABEL+1;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_LeadIdCode_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_LeadIdCode_set self LeadIdCode ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_LeadIdCode_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHANNEL_TYPE_LeadIdCode_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->LeadIdCode = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_LeadIdCode_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_LeadIdCode_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_LeadIdCode_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (uint16_t) ((arg1)->LeadIdCode);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_Transducer_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[MAX_LENGTH_TRANSDUCER+1] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_Transducer_set self Transducer ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_Transducer_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, MAX_LENGTH_TRANSDUCER+1);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CHANNEL_TYPE_Transducer_set" "', argument " "2"" of type '" "char [MAX_LENGTH_TRANSDUCER+1]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->Transducer,arg2,MAX_LENGTH_TRANSDUCER+1*sizeof(char));
  else memset(arg1->Transducer,0,MAX_LENGTH_TRANSDUCER+1*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_Transducer_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_Transducer_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_Transducer_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (char *)(char *) ((arg1)->Transducer);
  {
    size_t size = MAX_LENGTH_TRANSDUCER+1;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_PhysDimCode_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_PhysDimCode_set self PhysDimCode ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_PhysDimCode_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHANNEL_TYPE_PhysDimCode_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->PhysDimCode = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_PhysDimCode_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_PhysDimCode_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_PhysDimCode_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (uint16_t) ((arg1)->PhysDimCode);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_LowPass_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_LowPass_set self LowPass ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_LowPass_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHANNEL_TYPE_LowPass_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->LowPass = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_LowPass_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_LowPass_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_LowPass_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (float) ((arg1)->LowPass);
  Tcl_SetObjResult(interp,SWIG_From_float(static_cast< float >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_HighPass_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_HighPass_set self HighPass ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_HighPass_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHANNEL_TYPE_HighPass_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->HighPass = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_HighPass_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_HighPass_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_HighPass_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (float) ((arg1)->HighPass);
  Tcl_SetObjResult(interp,SWIG_From_float(static_cast< float >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_Notch_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_Notch_set self Notch ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_Notch_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHANNEL_TYPE_Notch_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->Notch = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_Notch_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_Notch_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_Notch_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (float) ((arg1)->Notch);
  Tcl_SetObjResult(interp,SWIG_From_float(static_cast< float >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_XYZ_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  float *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_XYZ_set self XYZ ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_XYZ_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CHANNEL_TYPE_XYZ_set" "', argument " "2"" of type '" "float [3]""'"); 
  } 
  arg2 = reinterpret_cast< float * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)3; ++ii) arg1->XYZ[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""XYZ""' of type '""float [3]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_XYZ_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_XYZ_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_XYZ_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (float *)(float *) ((arg1)->XYZ);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_float,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_Impedance_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_Impedance_set self Impedance ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_Impedance_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHANNEL_TYPE_Impedance_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->Impedance = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_Impedance_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_Impedance_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_Impedance_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (float) ((arg1)->Impedance);
  Tcl_SetObjResult(interp,SWIG_From_float(static_cast< float >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_fZ_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_fZ_set self fZ ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_fZ_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHANNEL_TYPE_fZ_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->fZ = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_fZ_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_fZ_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_fZ_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (float) ((arg1)->fZ);
  Tcl_SetObjResult(interp,SWIG_From_float(static_cast< float >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_GDFTYP_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_GDFTYP_set self GDFTYP ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_GDFTYP_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHANNEL_TYPE_GDFTYP_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->GDFTYP = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_GDFTYP_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_GDFTYP_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_GDFTYP_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (uint16_t) ((arg1)->GDFTYP);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_SPR_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CHANNEL_TYPE_SPR_set self SPR ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_SPR_set" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHANNEL_TYPE_SPR_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->SPR = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CHANNEL_TYPE_SPR_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CHANNEL_TYPE_SPR_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_TYPE_SPR_get" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  result = (uint32_t) ((arg1)->SPR);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_CHANNEL_TYPE(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_CHANNEL_TYPE ") == TCL_ERROR) SWIG_fail;
  result = (CHANNEL_TYPE *)new CHANNEL_TYPE();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CHANNEL_TYPE,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_CHANNEL_TYPE(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_CHANNEL_TYPE self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CHANNEL_TYPE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CHANNEL_TYPE" "', argument " "1"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_TYPE * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_CHANNEL_TYPE(void *obj) {
CHANNEL_TYPE *arg1 = (CHANNEL_TYPE *) obj;
delete arg1;
}
static swig_method swig_CHANNEL_TYPE_methods[] = {
    {0,0}
};
static swig_attribute swig_CHANNEL_TYPE_attributes[] = {
    { "-PhysMin",_wrap_CHANNEL_TYPE_PhysMin_get, _wrap_CHANNEL_TYPE_PhysMin_set},
    { "-PhysMax",_wrap_CHANNEL_TYPE_PhysMax_get, _wrap_CHANNEL_TYPE_PhysMax_set},
    { "-DigMin",_wrap_CHANNEL_TYPE_DigMin_get, _wrap_CHANNEL_TYPE_DigMin_set},
    { "-DigMax",_wrap_CHANNEL_TYPE_DigMax_get, _wrap_CHANNEL_TYPE_DigMax_set},
    { "-Cal",_wrap_CHANNEL_TYPE_Cal_get, _wrap_CHANNEL_TYPE_Cal_set},
    { "-Off",_wrap_CHANNEL_TYPE_Off_get, _wrap_CHANNEL_TYPE_Off_set},
    { "-OnOff",_wrap_CHANNEL_TYPE_OnOff_get, _wrap_CHANNEL_TYPE_OnOff_set},
    { "-Label",_wrap_CHANNEL_TYPE_Label_get, _wrap_CHANNEL_TYPE_Label_set},
    { "-LeadIdCode",_wrap_CHANNEL_TYPE_LeadIdCode_get, _wrap_CHANNEL_TYPE_LeadIdCode_set},
    { "-Transducer",_wrap_CHANNEL_TYPE_Transducer_get, _wrap_CHANNEL_TYPE_Transducer_set},
    { "-PhysDimCode",_wrap_CHANNEL_TYPE_PhysDimCode_get, _wrap_CHANNEL_TYPE_PhysDimCode_set},
    { "-LowPass",_wrap_CHANNEL_TYPE_LowPass_get, _wrap_CHANNEL_TYPE_LowPass_set},
    { "-HighPass",_wrap_CHANNEL_TYPE_HighPass_get, _wrap_CHANNEL_TYPE_HighPass_set},
    { "-Notch",_wrap_CHANNEL_TYPE_Notch_get, _wrap_CHANNEL_TYPE_Notch_set},
    { "-XYZ",_wrap_CHANNEL_TYPE_XYZ_get, _wrap_CHANNEL_TYPE_XYZ_set},
    { "-Impedance",_wrap_CHANNEL_TYPE_Impedance_get, _wrap_CHANNEL_TYPE_Impedance_set},
    { "-fZ",_wrap_CHANNEL_TYPE_fZ_get, _wrap_CHANNEL_TYPE_fZ_set},
    { "-GDFTYP",_wrap_CHANNEL_TYPE_GDFTYP_get, _wrap_CHANNEL_TYPE_GDFTYP_set},
    { "-SPR",_wrap_CHANNEL_TYPE_SPR_get, _wrap_CHANNEL_TYPE_SPR_set},
    {0,0,0}
};
static swig_class *swig_CHANNEL_TYPE_bases[] = {0};
static const char * swig_CHANNEL_TYPE_base_names[] = {0};
static swig_class _wrap_class_CHANNEL_TYPE = { "CHANNEL_TYPE", &SWIGTYPE_p_CHANNEL_TYPE,_wrap_new_CHANNEL_TYPE, swig_delete_CHANNEL_TYPE, swig_CHANNEL_TYPE_methods, swig_CHANNEL_TYPE_attributes, swig_CHANNEL_TYPE_bases,swig_CHANNEL_TYPE_base_names, &swig_module };
SWIGINTERN int
_wrap_HDRTYPE_TYPE_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  enum FileFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_TYPE_set self TYPE ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_TYPE_set" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_TYPE_set" "', argument " "2"" of type '" "enum FileFormat""'");
  } 
  arg2 = static_cast< enum FileFormat >(val2);
  if (arg1) (arg1)->TYPE = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_TYPE_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  enum FileFormat result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_TYPE_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_TYPE_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (enum FileFormat) ((arg1)->TYPE);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_VERSION_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_VERSION_set self VERSION ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_VERSION_set" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_VERSION_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->VERSION = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_VERSION_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_VERSION_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_VERSION_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (float) ((arg1)->VERSION);
  Tcl_SetObjResult(interp,SWIG_From_float(static_cast< float >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FileName_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_FileName_set self FileName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FileName_set" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_FileName_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->FileName = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->FileName = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FileName_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_FileName_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FileName_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (char *) ((arg1)->FileName);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_HeadLen_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_HeadLen_set self HeadLen ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_HeadLen_set" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_HeadLen_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->HeadLen = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_HeadLen_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_HeadLen_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_HeadLen_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (uint32_t) ((arg1)->HeadLen);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_NS_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_NS_set self NS ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_NS_set" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_NS_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->NS = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_NS_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_NS_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_NS_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (uint16_t) ((arg1)->NS);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_SPR_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_SPR_set self SPR ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_SPR_set" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_SPR_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->SPR = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_SPR_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_SPR_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_SPR_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (uint32_t) ((arg1)->SPR);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_NRec_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_NRec_set self NRec ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_NRec_set" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_NRec_set" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  if (arg1) (arg1)->NRec = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_NRec_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_NRec_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_NRec_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (int64_t) ((arg1)->NRec);
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_SampleRate_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_SampleRate_set self SampleRate ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_SampleRate_set" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_SampleRate_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->SampleRate = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_SampleRate_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_SampleRate_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_SampleRate_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (double) ((arg1)->SampleRate);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_IPaddr_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  uint8_t *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_IPaddr_set self IPaddr ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_IPaddr_set" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_IPaddr_set" "', argument " "2"" of type '" "uint8_t [6]""'"); 
  } 
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)6; ++ii) arg1->IPaddr[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""IPaddr""' of type '""uint8_t [6]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_IPaddr_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_IPaddr_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_IPaddr_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (uint8_t *)(uint8_t *) ((arg1)->IPaddr);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_LOC_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  uint32_t *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_LOC_set self LOC ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_LOC_set" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_LOC_set" "', argument " "2"" of type '" "uint32_t [4]""'"); 
  } 
  arg2 = reinterpret_cast< uint32_t * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) arg1->LOC[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""LOC""' of type '""uint32_t [4]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_LOC_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_LOC_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_LOC_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (uint32_t *)(uint32_t *) ((arg1)->LOC);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_int,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_T0_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  gdf_time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_T0_set self T0 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_T0_set" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_T0_set" "', argument " "2"" of type '" "gdf_time""'");
  } 
  arg2 = static_cast< gdf_time >(val2);
  if (arg1) (arg1)->T0 = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_T0_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gdf_time result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_T0_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_T0_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (gdf_time) ((arg1)->T0);
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_tzmin_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_tzmin_set self tzmin ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_tzmin_set" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_tzmin_set" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  if (arg1) (arg1)->tzmin = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_tzmin_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_tzmin_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_tzmin_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (int16_t) ((arg1)->tzmin);
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_CHANNEL_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  CHANNEL_TYPE *arg2 = (CHANNEL_TYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_CHANNEL_set self CHANNEL ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_CHANNEL_set" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_CHANNEL_TYPE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_CHANNEL_set" "', argument " "2"" of type '" "CHANNEL_TYPE *""'"); 
  }
  arg2 = reinterpret_cast< CHANNEL_TYPE * >(argp2);
  if (arg1) (arg1)->CHANNEL = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_CHANNEL_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CHANNEL_TYPE *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_CHANNEL_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_CHANNEL_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (CHANNEL_TYPE *) ((arg1)->CHANNEL);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CHANNEL_TYPE,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_aECG_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_aECG_set self aECG ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_aECG_set" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2],SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_aECG_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->aECG = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_aECG_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_aECG_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_aECG_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (void *) ((arg1)->aECG);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_void,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  HDRTYPE_AS *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_AS_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (HDRTYPE_AS *)& ((arg1)->AS);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_AS,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FILE_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  HDRTYPE_FILE *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_FILE_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FILE_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (HDRTYPE_FILE *)& ((arg1)->FILE);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_FILE,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FLAG_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  HDRTYPE_FLAG *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_FLAG_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FLAG_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (HDRTYPE_FLAG *)& ((arg1)->FLAG);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_FLAG,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_EVENT_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  HDRTYPE_EVENT *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_EVENT_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_EVENT_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (HDRTYPE_EVENT *)& ((arg1)->EVENT);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_EVENT,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ELEC_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  HDRTYPE_ELEC *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_ELEC_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ELEC_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (HDRTYPE_ELEC *)& ((arg1)->ELEC);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_ELEC,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ID_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  HDRTYPE_ID *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_ID_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (HDRTYPE_ID *)& ((arg1)->ID);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_ID,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  HDRTYPE_Patient *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_Patient_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (HDRTYPE_Patient *)& ((arg1)->Patient);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_Patient,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_data_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  HDRTYPE_data *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_data_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_data_get" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (HDRTYPE_data *)& ((arg1)->data);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_data,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_HDRTYPE(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_HDRTYPE ") == TCL_ERROR) SWIG_fail;
  result = (HDRTYPE *)new HDRTYPE();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_HDRTYPE(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_HDRTYPE self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HDRTYPE" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_HDRTYPE(void *obj) {
HDRTYPE *arg1 = (HDRTYPE *) obj;
delete arg1;
}
static swig_method swig_HDRTYPE_methods[] = {
    {0,0}
};
static swig_attribute swig_HDRTYPE_attributes[] = {
    { "-TYPE",_wrap_HDRTYPE_TYPE_get, _wrap_HDRTYPE_TYPE_set},
    { "-VERSION",_wrap_HDRTYPE_VERSION_get, _wrap_HDRTYPE_VERSION_set},
    { "-FileName",_wrap_HDRTYPE_FileName_get, _wrap_HDRTYPE_FileName_set},
    { "-HeadLen",_wrap_HDRTYPE_HeadLen_get, _wrap_HDRTYPE_HeadLen_set},
    { "-NS",_wrap_HDRTYPE_NS_get, _wrap_HDRTYPE_NS_set},
    { "-SPR",_wrap_HDRTYPE_SPR_get, _wrap_HDRTYPE_SPR_set},
    { "-NRec",_wrap_HDRTYPE_NRec_get, _wrap_HDRTYPE_NRec_set},
    { "-SampleRate",_wrap_HDRTYPE_SampleRate_get, _wrap_HDRTYPE_SampleRate_set},
    { "-IPaddr",_wrap_HDRTYPE_IPaddr_get, _wrap_HDRTYPE_IPaddr_set},
    { "-LOC",_wrap_HDRTYPE_LOC_get, _wrap_HDRTYPE_LOC_set},
    { "-T0",_wrap_HDRTYPE_T0_get, _wrap_HDRTYPE_T0_set},
    { "-tzmin",_wrap_HDRTYPE_tzmin_get, _wrap_HDRTYPE_tzmin_set},
    { "-CHANNEL",_wrap_HDRTYPE_CHANNEL_get, _wrap_HDRTYPE_CHANNEL_set},
    { "-aECG",_wrap_HDRTYPE_aECG_get, _wrap_HDRTYPE_aECG_set},
    { "-AS",_wrap_HDRTYPE_AS_get, 0 },
    { "-FILE",_wrap_HDRTYPE_FILE_get, 0 },
    { "-FLAG",_wrap_HDRTYPE_FLAG_get, 0 },
    { "-EVENT",_wrap_HDRTYPE_EVENT_get, 0 },
    { "-ELEC",_wrap_HDRTYPE_ELEC_get, 0 },
    { "-ID",_wrap_HDRTYPE_ID_get, 0 },
    { "-Patient",_wrap_HDRTYPE_Patient_get, 0 },
    { "-data",_wrap_HDRTYPE_data_get, 0 },
    {0,0,0}
};
static swig_class *swig_HDRTYPE_bases[] = {0};
static const char * swig_HDRTYPE_base_names[] = {0};
static swig_class _wrap_class_HDRTYPE = { "HDRTYPE", &SWIGTYPE_p_HDRTYPE,_wrap_new_HDRTYPE, swig_delete_HDRTYPE, swig_HDRTYPE_methods, swig_HDRTYPE_attributes, swig_HDRTYPE_bases,swig_HDRTYPE_base_names, &swig_module };
SWIGINTERN int
_wrap_HDRTYPE_AS_bpb_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_AS_bpb_set self bpb ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_bpb_set" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_AS_bpb_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->bpb = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_bpb_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_AS_bpb_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_bpb_get" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  result = (uint32_t) ((arg1)->bpb);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_bpb8_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_AS_bpb8_set self bpb8 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_bpb8_set" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_AS_bpb8_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->bpb8 = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_bpb8_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_AS_bpb8_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_bpb8_get" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  result = (uint32_t) ((arg1)->bpb8);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_Header_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_AS_Header_set self Header ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_Header_set" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_AS_Header_set" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  if (arg1) (arg1)->Header = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_Header_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_AS_Header_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_Header_get" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  result = (uint8_t *) ((arg1)->Header);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_rawEventData_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_AS_rawEventData_set self rawEventData ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_rawEventData_set" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_AS_rawEventData_set" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  if (arg1) (arg1)->rawEventData = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_rawEventData_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_AS_rawEventData_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_rawEventData_get" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  result = (uint8_t *) ((arg1)->rawEventData);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_rawdata_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_AS_rawdata_set self rawdata ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_rawdata_set" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_AS_rawdata_set" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  if (arg1) (arg1)->rawdata = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_rawdata_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_AS_rawdata_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_rawdata_get" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  result = (uint8_t *) ((arg1)->rawdata);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_flag_collapsed_rawdata_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_AS_flag_collapsed_rawdata_set self flag_collapsed_rawdata ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_flag_collapsed_rawdata_set" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_AS_flag_collapsed_rawdata_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->flag_collapsed_rawdata = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_flag_collapsed_rawdata_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_AS_flag_collapsed_rawdata_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_flag_collapsed_rawdata_get" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  result = (char) ((arg1)->flag_collapsed_rawdata);
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_first_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  nrec_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_AS_first_set self first ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_first_set" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_AS_first_set" "', argument " "2"" of type '" "nrec_t""'");
  } 
  arg2 = static_cast< nrec_t >(val2);
  if (arg1) (arg1)->first = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_first_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nrec_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_AS_first_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_first_get" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  result = (nrec_t) ((arg1)->first);
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_length_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  nrec_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_AS_length_set self length ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_length_set" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_AS_length_set" "', argument " "2"" of type '" "nrec_t""'");
  } 
  arg2 = static_cast< nrec_t >(val2);
  if (arg1) (arg1)->length = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_length_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nrec_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_AS_length_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_length_get" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  result = (nrec_t) ((arg1)->length);
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_auxBUF_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_AS_auxBUF_set self auxBUF ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_auxBUF_set" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_AS_auxBUF_set" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  if (arg1) (arg1)->auxBUF = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_auxBUF_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_AS_auxBUF_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_auxBUF_get" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  result = (uint8_t *) ((arg1)->auxBUF);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_bci2000_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_AS_bci2000_set self bci2000 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_bci2000_set" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_AS_bci2000_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->bci2000) delete[] arg1->bci2000;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->bci2000 = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->bci2000 = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_AS_bci2000_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_AS_bci2000_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_AS_bci2000_get" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  result = (char *) ((arg1)->bci2000);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_HDRTYPE_AS(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_HDRTYPE_AS ") == TCL_ERROR) SWIG_fail;
  result = (HDRTYPE_AS *)new HDRTYPE_AS();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_AS,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_HDRTYPE_AS(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_AS *arg1 = (HDRTYPE_AS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_HDRTYPE_AS self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_AS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HDRTYPE_AS" "', argument " "1"" of type '" "HDRTYPE_AS *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_AS * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_HDRTYPE_AS(void *obj) {
HDRTYPE_AS *arg1 = (HDRTYPE_AS *) obj;
delete arg1;
}
static swig_method swig_HDRTYPE_AS_methods[] = {
    {0,0}
};
static swig_attribute swig_HDRTYPE_AS_attributes[] = {
    { "-bpb",_wrap_HDRTYPE_AS_bpb_get, _wrap_HDRTYPE_AS_bpb_set},
    { "-bpb8",_wrap_HDRTYPE_AS_bpb8_get, _wrap_HDRTYPE_AS_bpb8_set},
    { "-Header",_wrap_HDRTYPE_AS_Header_get, _wrap_HDRTYPE_AS_Header_set},
    { "-rawEventData",_wrap_HDRTYPE_AS_rawEventData_get, _wrap_HDRTYPE_AS_rawEventData_set},
    { "-rawdata",_wrap_HDRTYPE_AS_rawdata_get, _wrap_HDRTYPE_AS_rawdata_set},
    { "-flag_collapsed_rawdata",_wrap_HDRTYPE_AS_flag_collapsed_rawdata_get, _wrap_HDRTYPE_AS_flag_collapsed_rawdata_set},
    { "-first",_wrap_HDRTYPE_AS_first_get, _wrap_HDRTYPE_AS_first_set},
    { "-length",_wrap_HDRTYPE_AS_length_get, _wrap_HDRTYPE_AS_length_set},
    { "-auxBUF",_wrap_HDRTYPE_AS_auxBUF_get, _wrap_HDRTYPE_AS_auxBUF_set},
    { "-bci2000",_wrap_HDRTYPE_AS_bci2000_get, _wrap_HDRTYPE_AS_bci2000_set},
    {0,0,0}
};
static swig_class *swig_HDRTYPE_AS_bases[] = {0};
static const char * swig_HDRTYPE_AS_base_names[] = {0};
static swig_class _wrap_class_HDRTYPE_AS = { "HDRTYPE_AS", &SWIGTYPE_p_HDRTYPE_AS,_wrap_new_HDRTYPE_AS, swig_delete_HDRTYPE_AS, swig_HDRTYPE_AS_methods, swig_HDRTYPE_AS_attributes, swig_HDRTYPE_AS_bases,swig_HDRTYPE_AS_base_names, &swig_module };
SWIGINTERN int
_wrap_HDRTYPE_FILE_FID_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FILE *arg1 = (HDRTYPE_FILE *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_FILE_FID_set self FID ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FILE_FID_set" "', argument " "1"" of type '" "HDRTYPE_FILE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FILE * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_FILE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_FILE_FID_set" "', argument " "2"" of type '" "FILE *""'"); 
  }
  arg2 = reinterpret_cast< FILE * >(argp2);
  if (arg1) (arg1)->FID = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FILE_FID_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FILE *arg1 = (HDRTYPE_FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FILE *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_FILE_FID_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FILE_FID_get" "', argument " "1"" of type '" "HDRTYPE_FILE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FILE * >(argp1);
  result = (FILE *) ((arg1)->FID);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_FILE,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FILE_POS_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FILE *arg1 = (HDRTYPE_FILE *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_FILE_POS_set self POS ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FILE_POS_set" "', argument " "1"" of type '" "HDRTYPE_FILE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FILE * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_FILE_POS_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->POS = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FILE_POS_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FILE *arg1 = (HDRTYPE_FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_FILE_POS_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FILE_POS_get" "', argument " "1"" of type '" "HDRTYPE_FILE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FILE * >(argp1);
  result =  ((arg1)->POS);
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FILE_OPEN_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FILE *arg1 = (HDRTYPE_FILE *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_FILE_OPEN_set self OPEN ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FILE_OPEN_set" "', argument " "1"" of type '" "HDRTYPE_FILE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FILE * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_FILE_OPEN_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->OPEN = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FILE_OPEN_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FILE *arg1 = (HDRTYPE_FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_FILE_OPEN_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FILE_OPEN_get" "', argument " "1"" of type '" "HDRTYPE_FILE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FILE * >(argp1);
  result = (uint8_t) ((arg1)->OPEN);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FILE_LittleEndian_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FILE *arg1 = (HDRTYPE_FILE *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_FILE_LittleEndian_set self LittleEndian ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FILE_LittleEndian_set" "', argument " "1"" of type '" "HDRTYPE_FILE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FILE * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_FILE_LittleEndian_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->LittleEndian = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FILE_LittleEndian_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FILE *arg1 = (HDRTYPE_FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_FILE_LittleEndian_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FILE_LittleEndian_get" "', argument " "1"" of type '" "HDRTYPE_FILE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FILE * >(argp1);
  result = (uint8_t) ((arg1)->LittleEndian);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FILE_COMPRESSION_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FILE *arg1 = (HDRTYPE_FILE *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_FILE_COMPRESSION_set self COMPRESSION ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FILE_COMPRESSION_set" "', argument " "1"" of type '" "HDRTYPE_FILE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FILE * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_FILE_COMPRESSION_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->COMPRESSION = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FILE_COMPRESSION_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FILE *arg1 = (HDRTYPE_FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_FILE_COMPRESSION_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FILE_COMPRESSION_get" "', argument " "1"" of type '" "HDRTYPE_FILE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FILE * >(argp1);
  result = (uint8_t) ((arg1)->COMPRESSION);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_HDRTYPE_FILE(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FILE *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_HDRTYPE_FILE ") == TCL_ERROR) SWIG_fail;
  result = (HDRTYPE_FILE *)new HDRTYPE_FILE();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_FILE,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_HDRTYPE_FILE(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FILE *arg1 = (HDRTYPE_FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_HDRTYPE_FILE self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FILE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HDRTYPE_FILE" "', argument " "1"" of type '" "HDRTYPE_FILE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FILE * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_HDRTYPE_FILE(void *obj) {
HDRTYPE_FILE *arg1 = (HDRTYPE_FILE *) obj;
delete arg1;
}
static swig_method swig_HDRTYPE_FILE_methods[] = {
    {0,0}
};
static swig_attribute swig_HDRTYPE_FILE_attributes[] = {
    { "-FID",_wrap_HDRTYPE_FILE_FID_get, _wrap_HDRTYPE_FILE_FID_set},
    { "-POS",_wrap_HDRTYPE_FILE_POS_get, _wrap_HDRTYPE_FILE_POS_set},
    { "-OPEN",_wrap_HDRTYPE_FILE_OPEN_get, _wrap_HDRTYPE_FILE_OPEN_set},
    { "-LittleEndian",_wrap_HDRTYPE_FILE_LittleEndian_get, _wrap_HDRTYPE_FILE_LittleEndian_set},
    { "-COMPRESSION",_wrap_HDRTYPE_FILE_COMPRESSION_get, _wrap_HDRTYPE_FILE_COMPRESSION_set},
    {0,0,0}
};
static swig_class *swig_HDRTYPE_FILE_bases[] = {0};
static const char * swig_HDRTYPE_FILE_base_names[] = {0};
static swig_class _wrap_class_HDRTYPE_FILE = { "HDRTYPE_FILE", &SWIGTYPE_p_HDRTYPE_FILE,_wrap_new_HDRTYPE_FILE, swig_delete_HDRTYPE_FILE, swig_HDRTYPE_FILE_methods, swig_HDRTYPE_FILE_attributes, swig_HDRTYPE_FILE_bases,swig_HDRTYPE_FILE_base_names, &swig_module };
SWIGINTERN int
_wrap_HDRTYPE_FLAG_OVERFLOWDETECTION_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FLAG *arg1 = (HDRTYPE_FLAG *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_FLAG_OVERFLOWDETECTION_set self OVERFLOWDETECTION ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FLAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FLAG_OVERFLOWDETECTION_set" "', argument " "1"" of type '" "HDRTYPE_FLAG *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FLAG * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_FLAG_OVERFLOWDETECTION_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->OVERFLOWDETECTION = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FLAG_OVERFLOWDETECTION_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FLAG *arg1 = (HDRTYPE_FLAG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_FLAG_OVERFLOWDETECTION_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FLAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FLAG_OVERFLOWDETECTION_get" "', argument " "1"" of type '" "HDRTYPE_FLAG *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FLAG * >(argp1);
  result = (char) ((arg1)->OVERFLOWDETECTION);
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FLAG_UCAL_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FLAG *arg1 = (HDRTYPE_FLAG *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_FLAG_UCAL_set self UCAL ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FLAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FLAG_UCAL_set" "', argument " "1"" of type '" "HDRTYPE_FLAG *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FLAG * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_FLAG_UCAL_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->UCAL = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FLAG_UCAL_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FLAG *arg1 = (HDRTYPE_FLAG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_FLAG_UCAL_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FLAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FLAG_UCAL_get" "', argument " "1"" of type '" "HDRTYPE_FLAG *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FLAG * >(argp1);
  result = (char) ((arg1)->UCAL);
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FLAG_ANONYMOUS_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FLAG *arg1 = (HDRTYPE_FLAG *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_FLAG_ANONYMOUS_set self ANONYMOUS ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FLAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FLAG_ANONYMOUS_set" "', argument " "1"" of type '" "HDRTYPE_FLAG *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FLAG * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_FLAG_ANONYMOUS_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->ANONYMOUS = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FLAG_ANONYMOUS_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FLAG *arg1 = (HDRTYPE_FLAG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_FLAG_ANONYMOUS_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FLAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FLAG_ANONYMOUS_get" "', argument " "1"" of type '" "HDRTYPE_FLAG *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FLAG * >(argp1);
  result = (char) ((arg1)->ANONYMOUS);
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FLAG_ROW_BASED_CHANNELS_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FLAG *arg1 = (HDRTYPE_FLAG *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_FLAG_ROW_BASED_CHANNELS_set self ROW_BASED_CHANNELS ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FLAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FLAG_ROW_BASED_CHANNELS_set" "', argument " "1"" of type '" "HDRTYPE_FLAG *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FLAG * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_FLAG_ROW_BASED_CHANNELS_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->ROW_BASED_CHANNELS = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FLAG_ROW_BASED_CHANNELS_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FLAG *arg1 = (HDRTYPE_FLAG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_FLAG_ROW_BASED_CHANNELS_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FLAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FLAG_ROW_BASED_CHANNELS_get" "', argument " "1"" of type '" "HDRTYPE_FLAG *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FLAG * >(argp1);
  result = (char) ((arg1)->ROW_BASED_CHANNELS);
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FLAG_TARGETSEGMENT_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FLAG *arg1 = (HDRTYPE_FLAG *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_FLAG_TARGETSEGMENT_set self TARGETSEGMENT ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FLAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FLAG_TARGETSEGMENT_set" "', argument " "1"" of type '" "HDRTYPE_FLAG *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FLAG * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_FLAG_TARGETSEGMENT_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->TARGETSEGMENT = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_FLAG_TARGETSEGMENT_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FLAG *arg1 = (HDRTYPE_FLAG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_FLAG_TARGETSEGMENT_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FLAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_FLAG_TARGETSEGMENT_get" "', argument " "1"" of type '" "HDRTYPE_FLAG *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FLAG * >(argp1);
  result = (char) ((arg1)->TARGETSEGMENT);
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_HDRTYPE_FLAG(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FLAG *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_HDRTYPE_FLAG ") == TCL_ERROR) SWIG_fail;
  result = (HDRTYPE_FLAG *)new HDRTYPE_FLAG();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_FLAG,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_HDRTYPE_FLAG(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_FLAG *arg1 = (HDRTYPE_FLAG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_HDRTYPE_FLAG self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_FLAG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HDRTYPE_FLAG" "', argument " "1"" of type '" "HDRTYPE_FLAG *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_FLAG * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_HDRTYPE_FLAG(void *obj) {
HDRTYPE_FLAG *arg1 = (HDRTYPE_FLAG *) obj;
delete arg1;
}
static swig_method swig_HDRTYPE_FLAG_methods[] = {
    {0,0}
};
static swig_attribute swig_HDRTYPE_FLAG_attributes[] = {
    { "-OVERFLOWDETECTION",_wrap_HDRTYPE_FLAG_OVERFLOWDETECTION_get, _wrap_HDRTYPE_FLAG_OVERFLOWDETECTION_set},
    { "-UCAL",_wrap_HDRTYPE_FLAG_UCAL_get, _wrap_HDRTYPE_FLAG_UCAL_set},
    { "-ANONYMOUS",_wrap_HDRTYPE_FLAG_ANONYMOUS_get, _wrap_HDRTYPE_FLAG_ANONYMOUS_set},
    { "-ROW_BASED_CHANNELS",_wrap_HDRTYPE_FLAG_ROW_BASED_CHANNELS_get, _wrap_HDRTYPE_FLAG_ROW_BASED_CHANNELS_set},
    { "-TARGETSEGMENT",_wrap_HDRTYPE_FLAG_TARGETSEGMENT_get, _wrap_HDRTYPE_FLAG_TARGETSEGMENT_set},
    {0,0,0}
};
static swig_class *swig_HDRTYPE_FLAG_bases[] = {0};
static const char * swig_HDRTYPE_FLAG_base_names[] = {0};
static swig_class _wrap_class_HDRTYPE_FLAG = { "HDRTYPE_FLAG", &SWIGTYPE_p_HDRTYPE_FLAG,_wrap_new_HDRTYPE_FLAG, swig_delete_HDRTYPE_FLAG, swig_HDRTYPE_FLAG_methods, swig_HDRTYPE_FLAG_attributes, swig_HDRTYPE_FLAG_bases,swig_HDRTYPE_FLAG_base_names, &swig_module };
SWIGINTERN int
_wrap_HDRTYPE_EVENT_SampleRate_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_EVENT_SampleRate_set self SampleRate ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_EVENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_EVENT_SampleRate_set" "', argument " "1"" of type '" "HDRTYPE_EVENT *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_EVENT * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_EVENT_SampleRate_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->SampleRate = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_EVENT_SampleRate_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_EVENT_SampleRate_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_EVENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_EVENT_SampleRate_get" "', argument " "1"" of type '" "HDRTYPE_EVENT *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_EVENT * >(argp1);
  result = (double) ((arg1)->SampleRate);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_EVENT_N_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_EVENT_N_set self N ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_EVENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_EVENT_N_set" "', argument " "1"" of type '" "HDRTYPE_EVENT *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_EVENT * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_EVENT_N_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->N = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_EVENT_N_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_EVENT_N_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_EVENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_EVENT_N_get" "', argument " "1"" of type '" "HDRTYPE_EVENT *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_EVENT * >(argp1);
  result = (uint32_t) ((arg1)->N);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_EVENT_TYP_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) 0 ;
  uint16_t *arg2 = (uint16_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_EVENT_TYP_set self TYP ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_EVENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_EVENT_TYP_set" "', argument " "1"" of type '" "HDRTYPE_EVENT *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_EVENT * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_short, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_EVENT_TYP_set" "', argument " "2"" of type '" "uint16_t *""'"); 
  }
  arg2 = reinterpret_cast< uint16_t * >(argp2);
  if (arg1) (arg1)->TYP = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_EVENT_TYP_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_EVENT_TYP_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_EVENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_EVENT_TYP_get" "', argument " "1"" of type '" "HDRTYPE_EVENT *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_EVENT * >(argp1);
  result = (uint16_t *) ((arg1)->TYP);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_EVENT_POS_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_EVENT_POS_set self POS ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_EVENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_EVENT_POS_set" "', argument " "1"" of type '" "HDRTYPE_EVENT *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_EVENT * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_int, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_EVENT_POS_set" "', argument " "2"" of type '" "uint32_t *""'"); 
  }
  arg2 = reinterpret_cast< uint32_t * >(argp2);
  if (arg1) (arg1)->POS = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_EVENT_POS_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_EVENT_POS_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_EVENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_EVENT_POS_get" "', argument " "1"" of type '" "HDRTYPE_EVENT *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_EVENT * >(argp1);
  result = (uint32_t *) ((arg1)->POS);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_int,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_EVENT_DUR_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_EVENT_DUR_set self DUR ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_EVENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_EVENT_DUR_set" "', argument " "1"" of type '" "HDRTYPE_EVENT *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_EVENT * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_int, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_EVENT_DUR_set" "', argument " "2"" of type '" "uint32_t *""'"); 
  }
  arg2 = reinterpret_cast< uint32_t * >(argp2);
  if (arg1) (arg1)->DUR = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_EVENT_DUR_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_EVENT_DUR_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_EVENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_EVENT_DUR_get" "', argument " "1"" of type '" "HDRTYPE_EVENT *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_EVENT * >(argp1);
  result = (uint32_t *) ((arg1)->DUR);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_int,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_EVENT_CHN_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) 0 ;
  uint16_t *arg2 = (uint16_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_EVENT_CHN_set self CHN ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_EVENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_EVENT_CHN_set" "', argument " "1"" of type '" "HDRTYPE_EVENT *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_EVENT * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_short, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_EVENT_CHN_set" "', argument " "2"" of type '" "uint16_t *""'"); 
  }
  arg2 = reinterpret_cast< uint16_t * >(argp2);
  if (arg1) (arg1)->CHN = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_EVENT_CHN_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_EVENT_CHN_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_EVENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_EVENT_CHN_get" "', argument " "1"" of type '" "HDRTYPE_EVENT *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_EVENT * >(argp1);
  result = (uint16_t *) ((arg1)->CHN);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_EVENT_CodeDesc_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) 0 ;
  char **arg2 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_EVENT_CodeDesc_set self CodeDesc ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_EVENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_EVENT_CodeDesc_set" "', argument " "1"" of type '" "HDRTYPE_EVENT *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_EVENT * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_EVENT_CodeDesc_set" "', argument " "2"" of type '" "char **""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  if (arg1) (arg1)->CodeDesc = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_EVENT_CodeDesc_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char **result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_EVENT_CodeDesc_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_EVENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_EVENT_CodeDesc_get" "', argument " "1"" of type '" "HDRTYPE_EVENT *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_EVENT * >(argp1);
  result = (char **) ((arg1)->CodeDesc);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_p_char,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_EVENT_LenCodeDesc_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_EVENT_LenCodeDesc_set self LenCodeDesc ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_EVENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_EVENT_LenCodeDesc_set" "', argument " "1"" of type '" "HDRTYPE_EVENT *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_EVENT * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_EVENT_LenCodeDesc_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->LenCodeDesc = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_EVENT_LenCodeDesc_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_EVENT_LenCodeDesc_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_EVENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_EVENT_LenCodeDesc_get" "', argument " "1"" of type '" "HDRTYPE_EVENT *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_EVENT * >(argp1);
  result = (uint16_t) ((arg1)->LenCodeDesc);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_HDRTYPE_EVENT(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_HDRTYPE_EVENT ") == TCL_ERROR) SWIG_fail;
  result = (HDRTYPE_EVENT *)new HDRTYPE_EVENT();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_EVENT,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_HDRTYPE_EVENT(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_HDRTYPE_EVENT self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_EVENT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HDRTYPE_EVENT" "', argument " "1"" of type '" "HDRTYPE_EVENT *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_EVENT * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_HDRTYPE_EVENT(void *obj) {
HDRTYPE_EVENT *arg1 = (HDRTYPE_EVENT *) obj;
delete arg1;
}
static swig_method swig_HDRTYPE_EVENT_methods[] = {
    {0,0}
};
static swig_attribute swig_HDRTYPE_EVENT_attributes[] = {
    { "-SampleRate",_wrap_HDRTYPE_EVENT_SampleRate_get, _wrap_HDRTYPE_EVENT_SampleRate_set},
    { "-N",_wrap_HDRTYPE_EVENT_N_get, _wrap_HDRTYPE_EVENT_N_set},
    { "-TYP",_wrap_HDRTYPE_EVENT_TYP_get, _wrap_HDRTYPE_EVENT_TYP_set},
    { "-POS",_wrap_HDRTYPE_EVENT_POS_get, _wrap_HDRTYPE_EVENT_POS_set},
    { "-DUR",_wrap_HDRTYPE_EVENT_DUR_get, _wrap_HDRTYPE_EVENT_DUR_set},
    { "-CHN",_wrap_HDRTYPE_EVENT_CHN_get, _wrap_HDRTYPE_EVENT_CHN_set},
    { "-CodeDesc",_wrap_HDRTYPE_EVENT_CodeDesc_get, _wrap_HDRTYPE_EVENT_CodeDesc_set},
    { "-LenCodeDesc",_wrap_HDRTYPE_EVENT_LenCodeDesc_get, _wrap_HDRTYPE_EVENT_LenCodeDesc_set},
    {0,0,0}
};
static swig_class *swig_HDRTYPE_EVENT_bases[] = {0};
static const char * swig_HDRTYPE_EVENT_base_names[] = {0};
static swig_class _wrap_class_HDRTYPE_EVENT = { "HDRTYPE_EVENT", &SWIGTYPE_p_HDRTYPE_EVENT,_wrap_new_HDRTYPE_EVENT, swig_delete_HDRTYPE_EVENT, swig_HDRTYPE_EVENT_methods, swig_HDRTYPE_EVENT_attributes, swig_HDRTYPE_EVENT_bases,swig_HDRTYPE_EVENT_base_names, &swig_module };
SWIGINTERN int
_wrap_HDRTYPE_ELEC_REF_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ELEC *arg1 = (HDRTYPE_ELEC *) 0 ;
  float *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_ELEC_REF_set self REF ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ELEC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ELEC_REF_set" "', argument " "1"" of type '" "HDRTYPE_ELEC *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ELEC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_ELEC_REF_set" "', argument " "2"" of type '" "float [3]""'"); 
  } 
  arg2 = reinterpret_cast< float * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)3; ++ii) arg1->REF[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""REF""' of type '""float [3]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ELEC_REF_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ELEC *arg1 = (HDRTYPE_ELEC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_ELEC_REF_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ELEC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ELEC_REF_get" "', argument " "1"" of type '" "HDRTYPE_ELEC *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ELEC * >(argp1);
  result = (float *)(float *) ((arg1)->REF);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_float,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ELEC_GND_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ELEC *arg1 = (HDRTYPE_ELEC *) 0 ;
  float *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_ELEC_GND_set self GND ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ELEC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ELEC_GND_set" "', argument " "1"" of type '" "HDRTYPE_ELEC *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ELEC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_ELEC_GND_set" "', argument " "2"" of type '" "float [3]""'"); 
  } 
  arg2 = reinterpret_cast< float * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)3; ++ii) arg1->GND[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""GND""' of type '""float [3]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ELEC_GND_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ELEC *arg1 = (HDRTYPE_ELEC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_ELEC_GND_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ELEC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ELEC_GND_get" "', argument " "1"" of type '" "HDRTYPE_ELEC *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ELEC * >(argp1);
  result = (float *)(float *) ((arg1)->GND);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_float,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_HDRTYPE_ELEC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ELEC *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_HDRTYPE_ELEC ") == TCL_ERROR) SWIG_fail;
  result = (HDRTYPE_ELEC *)new HDRTYPE_ELEC();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_ELEC,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_HDRTYPE_ELEC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ELEC *arg1 = (HDRTYPE_ELEC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_HDRTYPE_ELEC self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ELEC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HDRTYPE_ELEC" "', argument " "1"" of type '" "HDRTYPE_ELEC *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ELEC * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_HDRTYPE_ELEC(void *obj) {
HDRTYPE_ELEC *arg1 = (HDRTYPE_ELEC *) obj;
delete arg1;
}
static swig_method swig_HDRTYPE_ELEC_methods[] = {
    {0,0}
};
static swig_attribute swig_HDRTYPE_ELEC_attributes[] = {
    { "-REF",_wrap_HDRTYPE_ELEC_REF_get, _wrap_HDRTYPE_ELEC_REF_set},
    { "-GND",_wrap_HDRTYPE_ELEC_GND_get, _wrap_HDRTYPE_ELEC_GND_set},
    {0,0,0}
};
static swig_class *swig_HDRTYPE_ELEC_bases[] = {0};
static const char * swig_HDRTYPE_ELEC_base_names[] = {0};
static swig_class _wrap_class_HDRTYPE_ELEC = { "HDRTYPE_ELEC", &SWIGTYPE_p_HDRTYPE_ELEC,_wrap_new_HDRTYPE_ELEC, swig_delete_HDRTYPE_ELEC, swig_HDRTYPE_ELEC_methods, swig_HDRTYPE_ELEC_attributes, swig_HDRTYPE_ELEC_bases,swig_HDRTYPE_ELEC_base_names, &swig_module };
SWIGINTERN int
_wrap_HDRTYPE_ID_Recording_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID *arg1 = (HDRTYPE_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[MAX_LENGTH_RID+1] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_ID_Recording_set self Recording ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_Recording_set" "', argument " "1"" of type '" "HDRTYPE_ID *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, MAX_LENGTH_RID+1);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_ID_Recording_set" "', argument " "2"" of type '" "char [MAX_LENGTH_RID+1]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->Recording,arg2,MAX_LENGTH_RID+1*sizeof(char));
  else memset(arg1->Recording,0,MAX_LENGTH_RID+1*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ID_Recording_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID *arg1 = (HDRTYPE_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_ID_Recording_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_Recording_get" "', argument " "1"" of type '" "HDRTYPE_ID *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID * >(argp1);
  result = (char *)(char *) ((arg1)->Recording);
  {
    size_t size = MAX_LENGTH_RID+1;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ID_Technician_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID *arg1 = (HDRTYPE_ID *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[MAX_LENGTH_TECHNICIAN+1] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_ID_Technician_set self Technician ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_Technician_set" "', argument " "1"" of type '" "HDRTYPE_ID *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, MAX_LENGTH_TECHNICIAN+1);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_ID_Technician_set" "', argument " "2"" of type '" "char [MAX_LENGTH_TECHNICIAN+1]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->Technician,arg2,MAX_LENGTH_TECHNICIAN+1*sizeof(char));
  else memset(arg1->Technician,0,MAX_LENGTH_TECHNICIAN+1*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ID_Technician_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID *arg1 = (HDRTYPE_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_ID_Technician_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_Technician_get" "', argument " "1"" of type '" "HDRTYPE_ID *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID * >(argp1);
  result = (char *)(char *) ((arg1)->Technician);
  {
    size_t size = MAX_LENGTH_TECHNICIAN+1;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ID_Hospital_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID *arg1 = (HDRTYPE_ID *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_ID_Hospital_set self Hospital ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_Hospital_set" "', argument " "1"" of type '" "HDRTYPE_ID *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_ID_Hospital_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->Hospital) delete[] arg1->Hospital;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->Hospital = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->Hospital = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ID_Hospital_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID *arg1 = (HDRTYPE_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_ID_Hospital_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_Hospital_get" "', argument " "1"" of type '" "HDRTYPE_ID *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID * >(argp1);
  result = (char *) ((arg1)->Hospital);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ID_Equipment_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID *arg1 = (HDRTYPE_ID *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_ID_Equipment_set self Equipment ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_Equipment_set" "', argument " "1"" of type '" "HDRTYPE_ID *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_ID_Equipment_set" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  if (arg1) (arg1)->Equipment = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ID_Equipment_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID *arg1 = (HDRTYPE_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_ID_Equipment_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_Equipment_get" "', argument " "1"" of type '" "HDRTYPE_ID *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID * >(argp1);
  result = (uint64_t) ((arg1)->Equipment);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ID_Manufacturer_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID *arg1 = (HDRTYPE_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  HDRTYPE_ID_Manufacturer *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_ID_Manufacturer_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_Manufacturer_get" "', argument " "1"" of type '" "HDRTYPE_ID *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID * >(argp1);
  result = (HDRTYPE_ID_Manufacturer *)& ((arg1)->Manufacturer);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_ID_Manufacturer,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_HDRTYPE_ID(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_HDRTYPE_ID ") == TCL_ERROR) SWIG_fail;
  result = (HDRTYPE_ID *)new HDRTYPE_ID();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_ID,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_HDRTYPE_ID(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID *arg1 = (HDRTYPE_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_HDRTYPE_ID self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HDRTYPE_ID" "', argument " "1"" of type '" "HDRTYPE_ID *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_HDRTYPE_ID(void *obj) {
HDRTYPE_ID *arg1 = (HDRTYPE_ID *) obj;
delete arg1;
}
static swig_method swig_HDRTYPE_ID_methods[] = {
    {0,0}
};
static swig_attribute swig_HDRTYPE_ID_attributes[] = {
    { "-Recording",_wrap_HDRTYPE_ID_Recording_get, _wrap_HDRTYPE_ID_Recording_set},
    { "-Technician",_wrap_HDRTYPE_ID_Technician_get, _wrap_HDRTYPE_ID_Technician_set},
    { "-Hospital",_wrap_HDRTYPE_ID_Hospital_get, _wrap_HDRTYPE_ID_Hospital_set},
    { "-Equipment",_wrap_HDRTYPE_ID_Equipment_get, _wrap_HDRTYPE_ID_Equipment_set},
    { "-Manufacturer",_wrap_HDRTYPE_ID_Manufacturer_get, 0 },
    {0,0,0}
};
static swig_class *swig_HDRTYPE_ID_bases[] = {0};
static const char * swig_HDRTYPE_ID_base_names[] = {0};
static swig_class _wrap_class_HDRTYPE_ID = { "HDRTYPE_ID", &SWIGTYPE_p_HDRTYPE_ID,_wrap_new_HDRTYPE_ID, swig_delete_HDRTYPE_ID, swig_HDRTYPE_ID_methods, swig_HDRTYPE_ID_attributes, swig_HDRTYPE_ID_bases,swig_HDRTYPE_ID_base_names, &swig_module };
SWIGINTERN int
_wrap_HDRTYPE_ID_Manufacturer_Name_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID_Manufacturer *arg1 = (HDRTYPE_ID_Manufacturer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_ID_Manufacturer_Name_set self Name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID_Manufacturer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_Manufacturer_Name_set" "', argument " "1"" of type '" "HDRTYPE_ID_Manufacturer *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID_Manufacturer * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_ID_Manufacturer_Name_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->Name) delete[] arg1->Name;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->Name = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->Name = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ID_Manufacturer_Name_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID_Manufacturer *arg1 = (HDRTYPE_ID_Manufacturer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_ID_Manufacturer_Name_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID_Manufacturer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_Manufacturer_Name_get" "', argument " "1"" of type '" "HDRTYPE_ID_Manufacturer *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID_Manufacturer * >(argp1);
  result = (char *) ((arg1)->Name);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ID_Manufacturer_Model_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID_Manufacturer *arg1 = (HDRTYPE_ID_Manufacturer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_ID_Manufacturer_Model_set self Model ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID_Manufacturer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_Manufacturer_Model_set" "', argument " "1"" of type '" "HDRTYPE_ID_Manufacturer *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID_Manufacturer * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_ID_Manufacturer_Model_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->Model) delete[] arg1->Model;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->Model = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->Model = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ID_Manufacturer_Model_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID_Manufacturer *arg1 = (HDRTYPE_ID_Manufacturer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_ID_Manufacturer_Model_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID_Manufacturer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_Manufacturer_Model_get" "', argument " "1"" of type '" "HDRTYPE_ID_Manufacturer *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID_Manufacturer * >(argp1);
  result = (char *) ((arg1)->Model);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ID_Manufacturer_Version_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID_Manufacturer *arg1 = (HDRTYPE_ID_Manufacturer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_ID_Manufacturer_Version_set self Version ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID_Manufacturer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_Manufacturer_Version_set" "', argument " "1"" of type '" "HDRTYPE_ID_Manufacturer *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID_Manufacturer * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_ID_Manufacturer_Version_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->Version) delete[] arg1->Version;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->Version = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->Version = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ID_Manufacturer_Version_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID_Manufacturer *arg1 = (HDRTYPE_ID_Manufacturer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_ID_Manufacturer_Version_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID_Manufacturer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_Manufacturer_Version_get" "', argument " "1"" of type '" "HDRTYPE_ID_Manufacturer *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID_Manufacturer * >(argp1);
  result = (char *) ((arg1)->Version);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ID_Manufacturer_SerialNumber_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID_Manufacturer *arg1 = (HDRTYPE_ID_Manufacturer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_ID_Manufacturer_SerialNumber_set self SerialNumber ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID_Manufacturer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_Manufacturer_SerialNumber_set" "', argument " "1"" of type '" "HDRTYPE_ID_Manufacturer *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID_Manufacturer * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_ID_Manufacturer_SerialNumber_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->SerialNumber) delete[] arg1->SerialNumber;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->SerialNumber = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->SerialNumber = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_ID_Manufacturer_SerialNumber_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID_Manufacturer *arg1 = (HDRTYPE_ID_Manufacturer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_ID_Manufacturer_SerialNumber_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID_Manufacturer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_ID_Manufacturer_SerialNumber_get" "', argument " "1"" of type '" "HDRTYPE_ID_Manufacturer *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID_Manufacturer * >(argp1);
  result = (char *) ((arg1)->SerialNumber);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_HDRTYPE_ID_Manufacturer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID_Manufacturer *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_HDRTYPE_ID_Manufacturer ") == TCL_ERROR) SWIG_fail;
  result = (HDRTYPE_ID_Manufacturer *)new HDRTYPE_ID_Manufacturer();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_ID_Manufacturer,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_HDRTYPE_ID_Manufacturer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_ID_Manufacturer *arg1 = (HDRTYPE_ID_Manufacturer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_HDRTYPE_ID_Manufacturer self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_ID_Manufacturer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HDRTYPE_ID_Manufacturer" "', argument " "1"" of type '" "HDRTYPE_ID_Manufacturer *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_ID_Manufacturer * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_HDRTYPE_ID_Manufacturer(void *obj) {
HDRTYPE_ID_Manufacturer *arg1 = (HDRTYPE_ID_Manufacturer *) obj;
delete arg1;
}
static swig_method swig_HDRTYPE_ID_Manufacturer_methods[] = {
    {0,0}
};
static swig_attribute swig_HDRTYPE_ID_Manufacturer_attributes[] = {
    { "-Name",_wrap_HDRTYPE_ID_Manufacturer_Name_get, _wrap_HDRTYPE_ID_Manufacturer_Name_set},
    { "-Model",_wrap_HDRTYPE_ID_Manufacturer_Model_get, _wrap_HDRTYPE_ID_Manufacturer_Model_set},
    { "-Version",_wrap_HDRTYPE_ID_Manufacturer_Version_get, _wrap_HDRTYPE_ID_Manufacturer_Version_set},
    { "-SerialNumber",_wrap_HDRTYPE_ID_Manufacturer_SerialNumber_get, _wrap_HDRTYPE_ID_Manufacturer_SerialNumber_set},
    {0,0,0}
};
static swig_class *swig_HDRTYPE_ID_Manufacturer_bases[] = {0};
static const char * swig_HDRTYPE_ID_Manufacturer_base_names[] = {0};
static swig_class _wrap_class_HDRTYPE_ID_Manufacturer = { "HDRTYPE_ID_Manufacturer", &SWIGTYPE_p_HDRTYPE_ID_Manufacturer,_wrap_new_HDRTYPE_ID_Manufacturer, swig_delete_HDRTYPE_ID_Manufacturer, swig_HDRTYPE_ID_Manufacturer_methods, swig_HDRTYPE_ID_Manufacturer_attributes, swig_HDRTYPE_ID_Manufacturer_bases,swig_HDRTYPE_ID_Manufacturer_base_names, &swig_module };
SWIGINTERN int
_wrap_HDRTYPE_Patient_Name_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[MAX_LENGTH_NAME+1] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_Patient_Name_set self Name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Name_set" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, MAX_LENGTH_NAME+1);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_Patient_Name_set" "', argument " "2"" of type '" "char [MAX_LENGTH_NAME+1]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->Name,arg2,MAX_LENGTH_NAME+1*sizeof(char));
  else memset(arg1->Name,0,MAX_LENGTH_NAME+1*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Name_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_Patient_Name_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Name_get" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  result = (char *)(char *) ((arg1)->Name);
  {
    size_t size = MAX_LENGTH_NAME+1;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Id_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[MAX_LENGTH_PID+1] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_Patient_Id_set self Id ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Id_set" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, MAX_LENGTH_PID+1);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_Patient_Id_set" "', argument " "2"" of type '" "char [MAX_LENGTH_PID+1]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->Id,arg2,MAX_LENGTH_PID+1*sizeof(char));
  else memset(arg1->Id,0,MAX_LENGTH_PID+1*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Id_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_Patient_Id_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Id_get" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  result = (char *)(char *) ((arg1)->Id);
  {
    size_t size = MAX_LENGTH_PID+1;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Weight_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_Patient_Weight_set self Weight ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Weight_set" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_Patient_Weight_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->Weight = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Weight_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_Patient_Weight_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Weight_get" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  result = (uint8_t) ((arg1)->Weight);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Height_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_Patient_Height_set self Height ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Height_set" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_Patient_Height_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->Height = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Height_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_Patient_Height_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Height_get" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  result = (uint8_t) ((arg1)->Height);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Birthday_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  gdf_time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_Patient_Birthday_set self Birthday ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Birthday_set" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_Patient_Birthday_set" "', argument " "2"" of type '" "gdf_time""'");
  } 
  arg2 = static_cast< gdf_time >(val2);
  if (arg1) (arg1)->Birthday = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Birthday_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gdf_time result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_Patient_Birthday_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Birthday_get" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  result = (gdf_time) ((arg1)->Birthday);
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Headsize_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  uint16_t *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_Patient_Headsize_set self Headsize ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Headsize_set" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_Patient_Headsize_set" "', argument " "2"" of type '" "uint16_t [3]""'"); 
  } 
  arg2 = reinterpret_cast< uint16_t * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)3; ++ii) arg1->Headsize[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""Headsize""' of type '""uint16_t [3]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Headsize_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_Patient_Headsize_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Headsize_get" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  result = (uint16_t *)(uint16_t *) ((arg1)->Headsize);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Sex_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_Patient_Sex_set self Sex ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Sex_set" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_Patient_Sex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->Sex = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Sex_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_Patient_Sex_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Sex_get" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  result = (int) ((arg1)->Sex);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Handedness_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_Patient_Handedness_set self Handedness ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Handedness_set" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_Patient_Handedness_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->Handedness = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Handedness_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_Patient_Handedness_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Handedness_get" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  result = (int) ((arg1)->Handedness);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Smoking_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_Patient_Smoking_set self Smoking ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Smoking_set" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_Patient_Smoking_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->Smoking = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Smoking_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_Patient_Smoking_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Smoking_get" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  result = (int) ((arg1)->Smoking);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_AlcoholAbuse_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_Patient_AlcoholAbuse_set self AlcoholAbuse ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_AlcoholAbuse_set" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_Patient_AlcoholAbuse_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->AlcoholAbuse = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_AlcoholAbuse_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_Patient_AlcoholAbuse_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_AlcoholAbuse_get" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  result = (int) ((arg1)->AlcoholAbuse);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_DrugAbuse_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_Patient_DrugAbuse_set self DrugAbuse ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_DrugAbuse_set" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_Patient_DrugAbuse_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->DrugAbuse = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_DrugAbuse_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_Patient_DrugAbuse_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_DrugAbuse_get" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  result = (int) ((arg1)->DrugAbuse);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Medication_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_Patient_Medication_set self Medication ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Medication_set" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_Patient_Medication_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->Medication = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Medication_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_Patient_Medication_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Medication_get" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  result = (int) ((arg1)->Medication);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Impairment_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  HDRTYPE_Patient_Impairment *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_Patient_Impairment_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Impairment_get" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  result = (HDRTYPE_Patient_Impairment *)& ((arg1)->Impairment);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_Patient_Impairment,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_HDRTYPE_Patient(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_HDRTYPE_Patient ") == TCL_ERROR) SWIG_fail;
  result = (HDRTYPE_Patient *)new HDRTYPE_Patient();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_Patient,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_HDRTYPE_Patient(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_HDRTYPE_Patient self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HDRTYPE_Patient" "', argument " "1"" of type '" "HDRTYPE_Patient *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_HDRTYPE_Patient(void *obj) {
HDRTYPE_Patient *arg1 = (HDRTYPE_Patient *) obj;
delete arg1;
}
static swig_method swig_HDRTYPE_Patient_methods[] = {
    {0,0}
};
static swig_attribute swig_HDRTYPE_Patient_attributes[] = {
    { "-Name",_wrap_HDRTYPE_Patient_Name_get, _wrap_HDRTYPE_Patient_Name_set},
    { "-Id",_wrap_HDRTYPE_Patient_Id_get, _wrap_HDRTYPE_Patient_Id_set},
    { "-Weight",_wrap_HDRTYPE_Patient_Weight_get, _wrap_HDRTYPE_Patient_Weight_set},
    { "-Height",_wrap_HDRTYPE_Patient_Height_get, _wrap_HDRTYPE_Patient_Height_set},
    { "-Birthday",_wrap_HDRTYPE_Patient_Birthday_get, _wrap_HDRTYPE_Patient_Birthday_set},
    { "-Headsize",_wrap_HDRTYPE_Patient_Headsize_get, _wrap_HDRTYPE_Patient_Headsize_set},
    { "-Sex",_wrap_HDRTYPE_Patient_Sex_get, _wrap_HDRTYPE_Patient_Sex_set},
    { "-Handedness",_wrap_HDRTYPE_Patient_Handedness_get, _wrap_HDRTYPE_Patient_Handedness_set},
    { "-Smoking",_wrap_HDRTYPE_Patient_Smoking_get, _wrap_HDRTYPE_Patient_Smoking_set},
    { "-AlcoholAbuse",_wrap_HDRTYPE_Patient_AlcoholAbuse_get, _wrap_HDRTYPE_Patient_AlcoholAbuse_set},
    { "-DrugAbuse",_wrap_HDRTYPE_Patient_DrugAbuse_get, _wrap_HDRTYPE_Patient_DrugAbuse_set},
    { "-Medication",_wrap_HDRTYPE_Patient_Medication_get, _wrap_HDRTYPE_Patient_Medication_set},
    { "-Impairment",_wrap_HDRTYPE_Patient_Impairment_get, 0 },
    {0,0,0}
};
static swig_class *swig_HDRTYPE_Patient_bases[] = {0};
static const char * swig_HDRTYPE_Patient_base_names[] = {0};
static swig_class _wrap_class_HDRTYPE_Patient = { "HDRTYPE_Patient", &SWIGTYPE_p_HDRTYPE_Patient,_wrap_new_HDRTYPE_Patient, swig_delete_HDRTYPE_Patient, swig_HDRTYPE_Patient_methods, swig_HDRTYPE_Patient_attributes, swig_HDRTYPE_Patient_bases,swig_HDRTYPE_Patient_base_names, &swig_module };
SWIGINTERN int
_wrap_HDRTYPE_Patient_Impairment_Visual_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient_Impairment *arg1 = (HDRTYPE_Patient_Impairment *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_Patient_Impairment_Visual_set self Visual ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient_Impairment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Impairment_Visual_set" "', argument " "1"" of type '" "HDRTYPE_Patient_Impairment *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient_Impairment * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_Patient_Impairment_Visual_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->Visual = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Impairment_Visual_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient_Impairment *arg1 = (HDRTYPE_Patient_Impairment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_Patient_Impairment_Visual_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient_Impairment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Impairment_Visual_get" "', argument " "1"" of type '" "HDRTYPE_Patient_Impairment *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient_Impairment * >(argp1);
  result = (int) ((arg1)->Visual);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Impairment_Heart_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient_Impairment *arg1 = (HDRTYPE_Patient_Impairment *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_Patient_Impairment_Heart_set self Heart ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient_Impairment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Impairment_Heart_set" "', argument " "1"" of type '" "HDRTYPE_Patient_Impairment *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient_Impairment * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HDRTYPE_Patient_Impairment_Heart_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->Heart = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_Patient_Impairment_Heart_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient_Impairment *arg1 = (HDRTYPE_Patient_Impairment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_Patient_Impairment_Heart_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient_Impairment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_Patient_Impairment_Heart_get" "', argument " "1"" of type '" "HDRTYPE_Patient_Impairment *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient_Impairment * >(argp1);
  result = (int) ((arg1)->Heart);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_HDRTYPE_Patient_Impairment(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient_Impairment *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_HDRTYPE_Patient_Impairment ") == TCL_ERROR) SWIG_fail;
  result = (HDRTYPE_Patient_Impairment *)new HDRTYPE_Patient_Impairment();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_Patient_Impairment,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_HDRTYPE_Patient_Impairment(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_Patient_Impairment *arg1 = (HDRTYPE_Patient_Impairment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_HDRTYPE_Patient_Impairment self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_Patient_Impairment, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HDRTYPE_Patient_Impairment" "', argument " "1"" of type '" "HDRTYPE_Patient_Impairment *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_Patient_Impairment * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_HDRTYPE_Patient_Impairment(void *obj) {
HDRTYPE_Patient_Impairment *arg1 = (HDRTYPE_Patient_Impairment *) obj;
delete arg1;
}
static swig_method swig_HDRTYPE_Patient_Impairment_methods[] = {
    {0,0}
};
static swig_attribute swig_HDRTYPE_Patient_Impairment_attributes[] = {
    { "-Visual",_wrap_HDRTYPE_Patient_Impairment_Visual_get, _wrap_HDRTYPE_Patient_Impairment_Visual_set},
    { "-Heart",_wrap_HDRTYPE_Patient_Impairment_Heart_get, _wrap_HDRTYPE_Patient_Impairment_Heart_set},
    {0,0,0}
};
static swig_class *swig_HDRTYPE_Patient_Impairment_bases[] = {0};
static const char * swig_HDRTYPE_Patient_Impairment_base_names[] = {0};
static swig_class _wrap_class_HDRTYPE_Patient_Impairment = { "HDRTYPE_Patient_Impairment", &SWIGTYPE_p_HDRTYPE_Patient_Impairment,_wrap_new_HDRTYPE_Patient_Impairment, swig_delete_HDRTYPE_Patient_Impairment, swig_HDRTYPE_Patient_Impairment_methods, swig_HDRTYPE_Patient_Impairment_attributes, swig_HDRTYPE_Patient_Impairment_bases,swig_HDRTYPE_Patient_Impairment_base_names, &swig_module };
SWIGINTERN int
_wrap_HDRTYPE_data_size_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_data *arg1 = (HDRTYPE_data *) 0 ;
  size_t *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_data_size_set self size ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_data_size_set" "', argument " "1"" of type '" "HDRTYPE_data *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_data * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_data_size_set" "', argument " "2"" of type '" "size_t [2]""'"); 
  } 
  arg2 = reinterpret_cast< size_t * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) arg1->size[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""size""' of type '""size_t [2]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_data_size_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_data *arg1 = (HDRTYPE_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_data_size_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_data_size_get" "', argument " "1"" of type '" "HDRTYPE_data *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_data * >(argp1);
  result = (size_t *)(size_t *) ((arg1)->size);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_size_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_data_block_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_data *arg1 = (HDRTYPE_data *) 0 ;
  biosig_data_type *arg2 = (biosig_data_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HDRTYPE_data_block_set self block ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_data_block_set" "', argument " "1"" of type '" "HDRTYPE_data *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_data * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_biosig_data_type, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HDRTYPE_data_block_set" "', argument " "2"" of type '" "biosig_data_type *""'"); 
  }
  arg2 = reinterpret_cast< biosig_data_type * >(argp2);
  if (arg1) (arg1)->block = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HDRTYPE_data_block_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_data *arg1 = (HDRTYPE_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  biosig_data_type *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HDRTYPE_data_block_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HDRTYPE_data_block_get" "', argument " "1"" of type '" "HDRTYPE_data *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_data * >(argp1);
  result = (biosig_data_type *) ((arg1)->block);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_biosig_data_type,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_HDRTYPE_data(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_data *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_HDRTYPE_data ") == TCL_ERROR) SWIG_fail;
  result = (HDRTYPE_data *)new HDRTYPE_data();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE_data,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_HDRTYPE_data(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE_data *arg1 = (HDRTYPE_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_HDRTYPE_data self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE_data, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HDRTYPE_data" "', argument " "1"" of type '" "HDRTYPE_data *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE_data * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_HDRTYPE_data(void *obj) {
HDRTYPE_data *arg1 = (HDRTYPE_data *) obj;
delete arg1;
}
static swig_method swig_HDRTYPE_data_methods[] = {
    {0,0}
};
static swig_attribute swig_HDRTYPE_data_attributes[] = {
    { "-size",_wrap_HDRTYPE_data_size_get, _wrap_HDRTYPE_data_size_set},
    { "-block",_wrap_HDRTYPE_data_block_get, _wrap_HDRTYPE_data_block_set},
    {0,0,0}
};
static swig_class *swig_HDRTYPE_data_bases[] = {0};
static const char * swig_HDRTYPE_data_base_names[] = {0};
static swig_class _wrap_class_HDRTYPE_data = { "HDRTYPE_data", &SWIGTYPE_p_HDRTYPE_data,_wrap_new_HDRTYPE_data, swig_delete_HDRTYPE_data, swig_HDRTYPE_data_methods, swig_HDRTYPE_data_attributes, swig_HDRTYPE_data_bases,swig_HDRTYPE_data_base_names, &swig_module };
SWIGINTERN int
_wrap_constructHDR(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  HDRTYPE *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:constructHDR NS N_EVENT ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "constructHDR" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "constructHDR" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (HDRTYPE *)constructHDR(arg1,arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_destructHDR(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:destructHDR hdr ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "destructHDR" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  destructHDR(arg1);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_sopen(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  HDRTYPE *arg3 = (HDRTYPE *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  HDRTYPE *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:sopen FileName MODE hdr ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sopen" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sopen" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sopen" "', argument " "3"" of type '" "HDRTYPE *""'"); 
  }
  arg3 = reinterpret_cast< HDRTYPE * >(argp3);
  result = (HDRTYPE *)sopen((char const *)arg1,(char const *)arg2,arg3);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE,0));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_sclose(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:sclose hdr ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sclose" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (int)sclose(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_sread(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  biosig_data_type *arg1 = (biosig_data_type *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  HDRTYPE *arg4 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  size_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:sread data start length hdr ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_biosig_data_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sread" "', argument " "1"" of type '" "biosig_data_type *""'"); 
  }
  arg1 = reinterpret_cast< biosig_data_type * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sread" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sread" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "sread" "', argument " "4"" of type '" "HDRTYPE *""'"); 
  }
  arg4 = reinterpret_cast< HDRTYPE * >(argp4);
  result = sread(arg1,arg2,arg3,arg4);
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_swrite(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  biosig_data_type *arg1 = (biosig_data_type *) 0 ;
  size_t arg2 ;
  HDRTYPE *arg3 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  size_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:swrite data nelem hdr ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_biosig_data_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "swrite" "', argument " "1"" of type '" "biosig_data_type const *""'"); 
  }
  arg1 = reinterpret_cast< biosig_data_type * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "swrite" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "swrite" "', argument " "3"" of type '" "HDRTYPE *""'"); 
  }
  arg3 = reinterpret_cast< HDRTYPE * >(argp3);
  result = swrite((biosig_data_type const *)arg1,arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_seof(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:seof hdr ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seof" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (int)seof(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_srewind(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:srewind hdr ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "srewind" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  srewind(arg1);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_sseek(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  long arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:sseek hdr offset whence ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sseek" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sseek" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sseek" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)sseek(arg1,arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_stell(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:stell hdr ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stell" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  result = (long)stell(arg1);
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hdr2ascii__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:hdr2ascii hdr fid verbosity ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hdr2ascii" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hdr2ascii" "', argument " "2"" of type '" "FILE *""'"); 
  }
  arg2 = reinterpret_cast< FILE * >(argp2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hdr2ascii" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)hdr2ascii(arg1,arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RerefCHANNEL(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *arg2 = (void *) 0 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char val3 ;
  int ecode3 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:RerefCHANNEL hdr ReRef rrtype ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RerefCHANNEL" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RerefCHANNEL" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RerefCHANNEL" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  result = (int)RerefCHANNEL(arg1,arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetFileTypeString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  enum FileFormat arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetFileTypeString FMT ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetFileTypeString" "', argument " "1"" of type '" "enum FileFormat""'");
  } 
  arg1 = static_cast< enum FileFormat >(val1);
  result = (char *)GetFileTypeString(arg1);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_sload(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  size_t *arg2 ;
  biosig_data_type **arg3 = (biosig_data_type **) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  HDRTYPE *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:sload FileName CHANLIST DATA ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sload" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sload" "', argument " "2"" of type '" "size_t []""'"); 
  } 
  arg2 = reinterpret_cast< size_t * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_p_biosig_data_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sload" "', argument " "3"" of type '" "biosig_data_type **""'"); 
  }
  arg3 = reinterpret_cast< biosig_data_type ** >(argp3);
  result = (HDRTYPE *)sload((char const *)arg1,arg2,arg3);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HDRTYPE,0));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PhysDimCode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:PhysDimCode PhysDim0 ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhysDimCode" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (uint16_t)PhysDimCode(arg1);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PhysDim(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  uint16_t arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:PhysDim PhysDimCode PhysDimText ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PhysDim" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhysDim" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (char *)PhysDim(arg1,arg2);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_sort_eventtable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:sort_eventtable hdr ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sort_eventtable" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  sort_eventtable(arg1);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_convert2to4_eventtable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:convert2to4_eventtable hdr ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "convert2to4_eventtable" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  convert2to4_eventtable(arg1);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_convert4to2_eventtable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:convert4to2_eventtable hdr ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "convert4to2_eventtable" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  convert4to2_eventtable(arg1);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hdr2ascii__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HDRTYPE *arg1 = (HDRTYPE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hdr2ascii hdr verbosity ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HDRTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hdr2ascii" "', argument " "1"" of type '" "HDRTYPE *""'"); 
  }
  arg1 = reinterpret_cast< HDRTYPE * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hdr2ascii" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  hdr2ascii(arg1,arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hdr2ascii(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HDRTYPE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_hdr2ascii__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HDRTYPE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FILE, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_hdr2ascii__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'hdr2ascii'", TCL_STATIC);
  return TCL_ERROR;
}



static swig_command_info swig_commands[] = {
    { SWIG_prefix "imaxdiv_t_quot_set", (swig_wrapper_func) _wrap_imaxdiv_t_quot_set, NULL},
    { SWIG_prefix "imaxdiv_t_quot_get", (swig_wrapper_func) _wrap_imaxdiv_t_quot_get, NULL},
    { SWIG_prefix "imaxdiv_t_rem_set", (swig_wrapper_func) _wrap_imaxdiv_t_rem_set, NULL},
    { SWIG_prefix "imaxdiv_t_rem_get", (swig_wrapper_func) _wrap_imaxdiv_t_rem_get, NULL},
    { SWIG_prefix "new_imaxdiv_t", (swig_wrapper_func) _wrap_new_imaxdiv_t, NULL},
    { SWIG_prefix "delete_imaxdiv_t", (swig_wrapper_func) _wrap_delete_imaxdiv_t, NULL},
    { SWIG_prefix "imaxdiv_t", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_imaxdiv_t},
    { SWIG_prefix "imaxabs", (swig_wrapper_func) _wrap_imaxabs, NULL},
    { SWIG_prefix "imaxdiv", (swig_wrapper_func) _wrap_imaxdiv, NULL},
    { SWIG_prefix "strtoimax", (swig_wrapper_func) _wrap_strtoimax, NULL},
    { SWIG_prefix "strtoumax", (swig_wrapper_func) _wrap_strtoumax, NULL},
    { SWIG_prefix "CHANNEL_TYPE_PhysMin_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_PhysMin_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_PhysMin_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_PhysMin_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_PhysMax_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_PhysMax_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_PhysMax_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_PhysMax_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_DigMin_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_DigMin_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_DigMin_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_DigMin_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_DigMax_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_DigMax_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_DigMax_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_DigMax_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_Cal_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_Cal_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_Cal_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_Cal_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_Off_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_Off_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_Off_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_Off_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_OnOff_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_OnOff_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_OnOff_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_OnOff_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_Label_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_Label_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_Label_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_Label_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_LeadIdCode_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_LeadIdCode_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_LeadIdCode_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_LeadIdCode_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_Transducer_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_Transducer_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_Transducer_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_Transducer_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_PhysDimCode_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_PhysDimCode_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_PhysDimCode_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_PhysDimCode_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_LowPass_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_LowPass_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_LowPass_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_LowPass_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_HighPass_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_HighPass_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_HighPass_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_HighPass_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_Notch_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_Notch_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_Notch_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_Notch_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_XYZ_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_XYZ_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_XYZ_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_XYZ_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_Impedance_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_Impedance_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_Impedance_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_Impedance_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_fZ_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_fZ_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_fZ_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_fZ_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_GDFTYP_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_GDFTYP_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_GDFTYP_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_GDFTYP_get, NULL},
    { SWIG_prefix "CHANNEL_TYPE_SPR_set", (swig_wrapper_func) _wrap_CHANNEL_TYPE_SPR_set, NULL},
    { SWIG_prefix "CHANNEL_TYPE_SPR_get", (swig_wrapper_func) _wrap_CHANNEL_TYPE_SPR_get, NULL},
    { SWIG_prefix "new_CHANNEL_TYPE", (swig_wrapper_func) _wrap_new_CHANNEL_TYPE, NULL},
    { SWIG_prefix "delete_CHANNEL_TYPE", (swig_wrapper_func) _wrap_delete_CHANNEL_TYPE, NULL},
    { SWIG_prefix "CHANNEL_TYPE", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_CHANNEL_TYPE},
    { SWIG_prefix "HDRTYPE_TYPE_set", (swig_wrapper_func) _wrap_HDRTYPE_TYPE_set, NULL},
    { SWIG_prefix "HDRTYPE_TYPE_get", (swig_wrapper_func) _wrap_HDRTYPE_TYPE_get, NULL},
    { SWIG_prefix "HDRTYPE_VERSION_set", (swig_wrapper_func) _wrap_HDRTYPE_VERSION_set, NULL},
    { SWIG_prefix "HDRTYPE_VERSION_get", (swig_wrapper_func) _wrap_HDRTYPE_VERSION_get, NULL},
    { SWIG_prefix "HDRTYPE_FileName_set", (swig_wrapper_func) _wrap_HDRTYPE_FileName_set, NULL},
    { SWIG_prefix "HDRTYPE_FileName_get", (swig_wrapper_func) _wrap_HDRTYPE_FileName_get, NULL},
    { SWIG_prefix "HDRTYPE_HeadLen_set", (swig_wrapper_func) _wrap_HDRTYPE_HeadLen_set, NULL},
    { SWIG_prefix "HDRTYPE_HeadLen_get", (swig_wrapper_func) _wrap_HDRTYPE_HeadLen_get, NULL},
    { SWIG_prefix "HDRTYPE_NS_set", (swig_wrapper_func) _wrap_HDRTYPE_NS_set, NULL},
    { SWIG_prefix "HDRTYPE_NS_get", (swig_wrapper_func) _wrap_HDRTYPE_NS_get, NULL},
    { SWIG_prefix "HDRTYPE_SPR_set", (swig_wrapper_func) _wrap_HDRTYPE_SPR_set, NULL},
    { SWIG_prefix "HDRTYPE_SPR_get", (swig_wrapper_func) _wrap_HDRTYPE_SPR_get, NULL},
    { SWIG_prefix "HDRTYPE_NRec_set", (swig_wrapper_func) _wrap_HDRTYPE_NRec_set, NULL},
    { SWIG_prefix "HDRTYPE_NRec_get", (swig_wrapper_func) _wrap_HDRTYPE_NRec_get, NULL},
    { SWIG_prefix "HDRTYPE_SampleRate_set", (swig_wrapper_func) _wrap_HDRTYPE_SampleRate_set, NULL},
    { SWIG_prefix "HDRTYPE_SampleRate_get", (swig_wrapper_func) _wrap_HDRTYPE_SampleRate_get, NULL},
    { SWIG_prefix "HDRTYPE_IPaddr_set", (swig_wrapper_func) _wrap_HDRTYPE_IPaddr_set, NULL},
    { SWIG_prefix "HDRTYPE_IPaddr_get", (swig_wrapper_func) _wrap_HDRTYPE_IPaddr_get, NULL},
    { SWIG_prefix "HDRTYPE_LOC_set", (swig_wrapper_func) _wrap_HDRTYPE_LOC_set, NULL},
    { SWIG_prefix "HDRTYPE_LOC_get", (swig_wrapper_func) _wrap_HDRTYPE_LOC_get, NULL},
    { SWIG_prefix "HDRTYPE_T0_set", (swig_wrapper_func) _wrap_HDRTYPE_T0_set, NULL},
    { SWIG_prefix "HDRTYPE_T0_get", (swig_wrapper_func) _wrap_HDRTYPE_T0_get, NULL},
    { SWIG_prefix "HDRTYPE_tzmin_set", (swig_wrapper_func) _wrap_HDRTYPE_tzmin_set, NULL},
    { SWIG_prefix "HDRTYPE_tzmin_get", (swig_wrapper_func) _wrap_HDRTYPE_tzmin_get, NULL},
    { SWIG_prefix "HDRTYPE_CHANNEL_set", (swig_wrapper_func) _wrap_HDRTYPE_CHANNEL_set, NULL},
    { SWIG_prefix "HDRTYPE_CHANNEL_get", (swig_wrapper_func) _wrap_HDRTYPE_CHANNEL_get, NULL},
    { SWIG_prefix "HDRTYPE_aECG_set", (swig_wrapper_func) _wrap_HDRTYPE_aECG_set, NULL},
    { SWIG_prefix "HDRTYPE_aECG_get", (swig_wrapper_func) _wrap_HDRTYPE_aECG_get, NULL},
    { SWIG_prefix "HDRTYPE_AS_get", (swig_wrapper_func) _wrap_HDRTYPE_AS_get, NULL},
    { SWIG_prefix "HDRTYPE_FILE_get", (swig_wrapper_func) _wrap_HDRTYPE_FILE_get, NULL},
    { SWIG_prefix "HDRTYPE_FLAG_get", (swig_wrapper_func) _wrap_HDRTYPE_FLAG_get, NULL},
    { SWIG_prefix "HDRTYPE_EVENT_get", (swig_wrapper_func) _wrap_HDRTYPE_EVENT_get, NULL},
    { SWIG_prefix "HDRTYPE_ELEC_get", (swig_wrapper_func) _wrap_HDRTYPE_ELEC_get, NULL},
    { SWIG_prefix "HDRTYPE_ID_get", (swig_wrapper_func) _wrap_HDRTYPE_ID_get, NULL},
    { SWIG_prefix "HDRTYPE_Patient_get", (swig_wrapper_func) _wrap_HDRTYPE_Patient_get, NULL},
    { SWIG_prefix "HDRTYPE_data_get", (swig_wrapper_func) _wrap_HDRTYPE_data_get, NULL},
    { SWIG_prefix "new_HDRTYPE", (swig_wrapper_func) _wrap_new_HDRTYPE, NULL},
    { SWIG_prefix "delete_HDRTYPE", (swig_wrapper_func) _wrap_delete_HDRTYPE, NULL},
    { SWIG_prefix "HDRTYPE", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_HDRTYPE},
    { SWIG_prefix "HDRTYPE_AS_bpb_set", (swig_wrapper_func) _wrap_HDRTYPE_AS_bpb_set, NULL},
    { SWIG_prefix "HDRTYPE_AS_bpb_get", (swig_wrapper_func) _wrap_HDRTYPE_AS_bpb_get, NULL},
    { SWIG_prefix "HDRTYPE_AS_bpb8_set", (swig_wrapper_func) _wrap_HDRTYPE_AS_bpb8_set, NULL},
    { SWIG_prefix "HDRTYPE_AS_bpb8_get", (swig_wrapper_func) _wrap_HDRTYPE_AS_bpb8_get, NULL},
    { SWIG_prefix "HDRTYPE_AS_Header_set", (swig_wrapper_func) _wrap_HDRTYPE_AS_Header_set, NULL},
    { SWIG_prefix "HDRTYPE_AS_Header_get", (swig_wrapper_func) _wrap_HDRTYPE_AS_Header_get, NULL},
    { SWIG_prefix "HDRTYPE_AS_rawEventData_set", (swig_wrapper_func) _wrap_HDRTYPE_AS_rawEventData_set, NULL},
    { SWIG_prefix "HDRTYPE_AS_rawEventData_get", (swig_wrapper_func) _wrap_HDRTYPE_AS_rawEventData_get, NULL},
    { SWIG_prefix "HDRTYPE_AS_rawdata_set", (swig_wrapper_func) _wrap_HDRTYPE_AS_rawdata_set, NULL},
    { SWIG_prefix "HDRTYPE_AS_rawdata_get", (swig_wrapper_func) _wrap_HDRTYPE_AS_rawdata_get, NULL},
    { SWIG_prefix "HDRTYPE_AS_flag_collapsed_rawdata_set", (swig_wrapper_func) _wrap_HDRTYPE_AS_flag_collapsed_rawdata_set, NULL},
    { SWIG_prefix "HDRTYPE_AS_flag_collapsed_rawdata_get", (swig_wrapper_func) _wrap_HDRTYPE_AS_flag_collapsed_rawdata_get, NULL},
    { SWIG_prefix "HDRTYPE_AS_first_set", (swig_wrapper_func) _wrap_HDRTYPE_AS_first_set, NULL},
    { SWIG_prefix "HDRTYPE_AS_first_get", (swig_wrapper_func) _wrap_HDRTYPE_AS_first_get, NULL},
    { SWIG_prefix "HDRTYPE_AS_length_set", (swig_wrapper_func) _wrap_HDRTYPE_AS_length_set, NULL},
    { SWIG_prefix "HDRTYPE_AS_length_get", (swig_wrapper_func) _wrap_HDRTYPE_AS_length_get, NULL},
    { SWIG_prefix "HDRTYPE_AS_auxBUF_set", (swig_wrapper_func) _wrap_HDRTYPE_AS_auxBUF_set, NULL},
    { SWIG_prefix "HDRTYPE_AS_auxBUF_get", (swig_wrapper_func) _wrap_HDRTYPE_AS_auxBUF_get, NULL},
    { SWIG_prefix "HDRTYPE_AS_bci2000_set", (swig_wrapper_func) _wrap_HDRTYPE_AS_bci2000_set, NULL},
    { SWIG_prefix "HDRTYPE_AS_bci2000_get", (swig_wrapper_func) _wrap_HDRTYPE_AS_bci2000_get, NULL},
    { SWIG_prefix "new_HDRTYPE_AS", (swig_wrapper_func) _wrap_new_HDRTYPE_AS, NULL},
    { SWIG_prefix "delete_HDRTYPE_AS", (swig_wrapper_func) _wrap_delete_HDRTYPE_AS, NULL},
    { SWIG_prefix "HDRTYPE_AS", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_HDRTYPE_AS},
    { SWIG_prefix "HDRTYPE_FILE_FID_set", (swig_wrapper_func) _wrap_HDRTYPE_FILE_FID_set, NULL},
    { SWIG_prefix "HDRTYPE_FILE_FID_get", (swig_wrapper_func) _wrap_HDRTYPE_FILE_FID_get, NULL},
    { SWIG_prefix "HDRTYPE_FILE_POS_set", (swig_wrapper_func) _wrap_HDRTYPE_FILE_POS_set, NULL},
    { SWIG_prefix "HDRTYPE_FILE_POS_get", (swig_wrapper_func) _wrap_HDRTYPE_FILE_POS_get, NULL},
    { SWIG_prefix "HDRTYPE_FILE_OPEN_set", (swig_wrapper_func) _wrap_HDRTYPE_FILE_OPEN_set, NULL},
    { SWIG_prefix "HDRTYPE_FILE_OPEN_get", (swig_wrapper_func) _wrap_HDRTYPE_FILE_OPEN_get, NULL},
    { SWIG_prefix "HDRTYPE_FILE_LittleEndian_set", (swig_wrapper_func) _wrap_HDRTYPE_FILE_LittleEndian_set, NULL},
    { SWIG_prefix "HDRTYPE_FILE_LittleEndian_get", (swig_wrapper_func) _wrap_HDRTYPE_FILE_LittleEndian_get, NULL},
    { SWIG_prefix "HDRTYPE_FILE_COMPRESSION_set", (swig_wrapper_func) _wrap_HDRTYPE_FILE_COMPRESSION_set, NULL},
    { SWIG_prefix "HDRTYPE_FILE_COMPRESSION_get", (swig_wrapper_func) _wrap_HDRTYPE_FILE_COMPRESSION_get, NULL},
    { SWIG_prefix "new_HDRTYPE_FILE", (swig_wrapper_func) _wrap_new_HDRTYPE_FILE, NULL},
    { SWIG_prefix "delete_HDRTYPE_FILE", (swig_wrapper_func) _wrap_delete_HDRTYPE_FILE, NULL},
    { SWIG_prefix "HDRTYPE_FILE", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_HDRTYPE_FILE},
    { SWIG_prefix "HDRTYPE_FLAG_OVERFLOWDETECTION_set", (swig_wrapper_func) _wrap_HDRTYPE_FLAG_OVERFLOWDETECTION_set, NULL},
    { SWIG_prefix "HDRTYPE_FLAG_OVERFLOWDETECTION_get", (swig_wrapper_func) _wrap_HDRTYPE_FLAG_OVERFLOWDETECTION_get, NULL},
    { SWIG_prefix "HDRTYPE_FLAG_UCAL_set", (swig_wrapper_func) _wrap_HDRTYPE_FLAG_UCAL_set, NULL},
    { SWIG_prefix "HDRTYPE_FLAG_UCAL_get", (swig_wrapper_func) _wrap_HDRTYPE_FLAG_UCAL_get, NULL},
    { SWIG_prefix "HDRTYPE_FLAG_ANONYMOUS_set", (swig_wrapper_func) _wrap_HDRTYPE_FLAG_ANONYMOUS_set, NULL},
    { SWIG_prefix "HDRTYPE_FLAG_ANONYMOUS_get", (swig_wrapper_func) _wrap_HDRTYPE_FLAG_ANONYMOUS_get, NULL},
    { SWIG_prefix "HDRTYPE_FLAG_ROW_BASED_CHANNELS_set", (swig_wrapper_func) _wrap_HDRTYPE_FLAG_ROW_BASED_CHANNELS_set, NULL},
    { SWIG_prefix "HDRTYPE_FLAG_ROW_BASED_CHANNELS_get", (swig_wrapper_func) _wrap_HDRTYPE_FLAG_ROW_BASED_CHANNELS_get, NULL},
    { SWIG_prefix "HDRTYPE_FLAG_TARGETSEGMENT_set", (swig_wrapper_func) _wrap_HDRTYPE_FLAG_TARGETSEGMENT_set, NULL},
    { SWIG_prefix "HDRTYPE_FLAG_TARGETSEGMENT_get", (swig_wrapper_func) _wrap_HDRTYPE_FLAG_TARGETSEGMENT_get, NULL},
    { SWIG_prefix "new_HDRTYPE_FLAG", (swig_wrapper_func) _wrap_new_HDRTYPE_FLAG, NULL},
    { SWIG_prefix "delete_HDRTYPE_FLAG", (swig_wrapper_func) _wrap_delete_HDRTYPE_FLAG, NULL},
    { SWIG_prefix "HDRTYPE_FLAG", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_HDRTYPE_FLAG},
    { SWIG_prefix "HDRTYPE_EVENT_SampleRate_set", (swig_wrapper_func) _wrap_HDRTYPE_EVENT_SampleRate_set, NULL},
    { SWIG_prefix "HDRTYPE_EVENT_SampleRate_get", (swig_wrapper_func) _wrap_HDRTYPE_EVENT_SampleRate_get, NULL},
    { SWIG_prefix "HDRTYPE_EVENT_N_set", (swig_wrapper_func) _wrap_HDRTYPE_EVENT_N_set, NULL},
    { SWIG_prefix "HDRTYPE_EVENT_N_get", (swig_wrapper_func) _wrap_HDRTYPE_EVENT_N_get, NULL},
    { SWIG_prefix "HDRTYPE_EVENT_TYP_set", (swig_wrapper_func) _wrap_HDRTYPE_EVENT_TYP_set, NULL},
    { SWIG_prefix "HDRTYPE_EVENT_TYP_get", (swig_wrapper_func) _wrap_HDRTYPE_EVENT_TYP_get, NULL},
    { SWIG_prefix "HDRTYPE_EVENT_POS_set", (swig_wrapper_func) _wrap_HDRTYPE_EVENT_POS_set, NULL},
    { SWIG_prefix "HDRTYPE_EVENT_POS_get", (swig_wrapper_func) _wrap_HDRTYPE_EVENT_POS_get, NULL},
    { SWIG_prefix "HDRTYPE_EVENT_DUR_set", (swig_wrapper_func) _wrap_HDRTYPE_EVENT_DUR_set, NULL},
    { SWIG_prefix "HDRTYPE_EVENT_DUR_get", (swig_wrapper_func) _wrap_HDRTYPE_EVENT_DUR_get, NULL},
    { SWIG_prefix "HDRTYPE_EVENT_CHN_set", (swig_wrapper_func) _wrap_HDRTYPE_EVENT_CHN_set, NULL},
    { SWIG_prefix "HDRTYPE_EVENT_CHN_get", (swig_wrapper_func) _wrap_HDRTYPE_EVENT_CHN_get, NULL},
    { SWIG_prefix "HDRTYPE_EVENT_CodeDesc_set", (swig_wrapper_func) _wrap_HDRTYPE_EVENT_CodeDesc_set, NULL},
    { SWIG_prefix "HDRTYPE_EVENT_CodeDesc_get", (swig_wrapper_func) _wrap_HDRTYPE_EVENT_CodeDesc_get, NULL},
    { SWIG_prefix "HDRTYPE_EVENT_LenCodeDesc_set", (swig_wrapper_func) _wrap_HDRTYPE_EVENT_LenCodeDesc_set, NULL},
    { SWIG_prefix "HDRTYPE_EVENT_LenCodeDesc_get", (swig_wrapper_func) _wrap_HDRTYPE_EVENT_LenCodeDesc_get, NULL},
    { SWIG_prefix "new_HDRTYPE_EVENT", (swig_wrapper_func) _wrap_new_HDRTYPE_EVENT, NULL},
    { SWIG_prefix "delete_HDRTYPE_EVENT", (swig_wrapper_func) _wrap_delete_HDRTYPE_EVENT, NULL},
    { SWIG_prefix "HDRTYPE_EVENT", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_HDRTYPE_EVENT},
    { SWIG_prefix "HDRTYPE_ELEC_REF_set", (swig_wrapper_func) _wrap_HDRTYPE_ELEC_REF_set, NULL},
    { SWIG_prefix "HDRTYPE_ELEC_REF_get", (swig_wrapper_func) _wrap_HDRTYPE_ELEC_REF_get, NULL},
    { SWIG_prefix "HDRTYPE_ELEC_GND_set", (swig_wrapper_func) _wrap_HDRTYPE_ELEC_GND_set, NULL},
    { SWIG_prefix "HDRTYPE_ELEC_GND_get", (swig_wrapper_func) _wrap_HDRTYPE_ELEC_GND_get, NULL},
    { SWIG_prefix "new_HDRTYPE_ELEC", (swig_wrapper_func) _wrap_new_HDRTYPE_ELEC, NULL},
    { SWIG_prefix "delete_HDRTYPE_ELEC", (swig_wrapper_func) _wrap_delete_HDRTYPE_ELEC, NULL},
    { SWIG_prefix "HDRTYPE_ELEC", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_HDRTYPE_ELEC},
    { SWIG_prefix "HDRTYPE_ID_Recording_set", (swig_wrapper_func) _wrap_HDRTYPE_ID_Recording_set, NULL},
    { SWIG_prefix "HDRTYPE_ID_Recording_get", (swig_wrapper_func) _wrap_HDRTYPE_ID_Recording_get, NULL},
    { SWIG_prefix "HDRTYPE_ID_Technician_set", (swig_wrapper_func) _wrap_HDRTYPE_ID_Technician_set, NULL},
    { SWIG_prefix "HDRTYPE_ID_Technician_get", (swig_wrapper_func) _wrap_HDRTYPE_ID_Technician_get, NULL},
    { SWIG_prefix "HDRTYPE_ID_Hospital_set", (swig_wrapper_func) _wrap_HDRTYPE_ID_Hospital_set, NULL},
    { SWIG_prefix "HDRTYPE_ID_Hospital_get", (swig_wrapper_func) _wrap_HDRTYPE_ID_Hospital_get, NULL},
    { SWIG_prefix "HDRTYPE_ID_Equipment_set", (swig_wrapper_func) _wrap_HDRTYPE_ID_Equipment_set, NULL},
    { SWIG_prefix "HDRTYPE_ID_Equipment_get", (swig_wrapper_func) _wrap_HDRTYPE_ID_Equipment_get, NULL},
    { SWIG_prefix "HDRTYPE_ID_Manufacturer_get", (swig_wrapper_func) _wrap_HDRTYPE_ID_Manufacturer_get, NULL},
    { SWIG_prefix "new_HDRTYPE_ID", (swig_wrapper_func) _wrap_new_HDRTYPE_ID, NULL},
    { SWIG_prefix "delete_HDRTYPE_ID", (swig_wrapper_func) _wrap_delete_HDRTYPE_ID, NULL},
    { SWIG_prefix "HDRTYPE_ID", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_HDRTYPE_ID},
    { SWIG_prefix "HDRTYPE_ID_Manufacturer_Name_set", (swig_wrapper_func) _wrap_HDRTYPE_ID_Manufacturer_Name_set, NULL},
    { SWIG_prefix "HDRTYPE_ID_Manufacturer_Name_get", (swig_wrapper_func) _wrap_HDRTYPE_ID_Manufacturer_Name_get, NULL},
    { SWIG_prefix "HDRTYPE_ID_Manufacturer_Model_set", (swig_wrapper_func) _wrap_HDRTYPE_ID_Manufacturer_Model_set, NULL},
    { SWIG_prefix "HDRTYPE_ID_Manufacturer_Model_get", (swig_wrapper_func) _wrap_HDRTYPE_ID_Manufacturer_Model_get, NULL},
    { SWIG_prefix "HDRTYPE_ID_Manufacturer_Version_set", (swig_wrapper_func) _wrap_HDRTYPE_ID_Manufacturer_Version_set, NULL},
    { SWIG_prefix "HDRTYPE_ID_Manufacturer_Version_get", (swig_wrapper_func) _wrap_HDRTYPE_ID_Manufacturer_Version_get, NULL},
    { SWIG_prefix "HDRTYPE_ID_Manufacturer_SerialNumber_set", (swig_wrapper_func) _wrap_HDRTYPE_ID_Manufacturer_SerialNumber_set, NULL},
    { SWIG_prefix "HDRTYPE_ID_Manufacturer_SerialNumber_get", (swig_wrapper_func) _wrap_HDRTYPE_ID_Manufacturer_SerialNumber_get, NULL},
    { SWIG_prefix "new_HDRTYPE_ID_Manufacturer", (swig_wrapper_func) _wrap_new_HDRTYPE_ID_Manufacturer, NULL},
    { SWIG_prefix "delete_HDRTYPE_ID_Manufacturer", (swig_wrapper_func) _wrap_delete_HDRTYPE_ID_Manufacturer, NULL},
    { SWIG_prefix "HDRTYPE_ID_Manufacturer", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_HDRTYPE_ID_Manufacturer},
    { SWIG_prefix "HDRTYPE_Patient_Name_set", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Name_set, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Name_get", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Name_get, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Id_set", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Id_set, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Id_get", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Id_get, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Weight_set", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Weight_set, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Weight_get", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Weight_get, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Height_set", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Height_set, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Height_get", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Height_get, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Birthday_set", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Birthday_set, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Birthday_get", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Birthday_get, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Headsize_set", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Headsize_set, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Headsize_get", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Headsize_get, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Sex_set", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Sex_set, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Sex_get", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Sex_get, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Handedness_set", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Handedness_set, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Handedness_get", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Handedness_get, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Smoking_set", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Smoking_set, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Smoking_get", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Smoking_get, NULL},
    { SWIG_prefix "HDRTYPE_Patient_AlcoholAbuse_set", (swig_wrapper_func) _wrap_HDRTYPE_Patient_AlcoholAbuse_set, NULL},
    { SWIG_prefix "HDRTYPE_Patient_AlcoholAbuse_get", (swig_wrapper_func) _wrap_HDRTYPE_Patient_AlcoholAbuse_get, NULL},
    { SWIG_prefix "HDRTYPE_Patient_DrugAbuse_set", (swig_wrapper_func) _wrap_HDRTYPE_Patient_DrugAbuse_set, NULL},
    { SWIG_prefix "HDRTYPE_Patient_DrugAbuse_get", (swig_wrapper_func) _wrap_HDRTYPE_Patient_DrugAbuse_get, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Medication_set", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Medication_set, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Medication_get", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Medication_get, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Impairment_get", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Impairment_get, NULL},
    { SWIG_prefix "new_HDRTYPE_Patient", (swig_wrapper_func) _wrap_new_HDRTYPE_Patient, NULL},
    { SWIG_prefix "delete_HDRTYPE_Patient", (swig_wrapper_func) _wrap_delete_HDRTYPE_Patient, NULL},
    { SWIG_prefix "HDRTYPE_Patient", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_HDRTYPE_Patient},
    { SWIG_prefix "HDRTYPE_Patient_Impairment_Visual_set", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Impairment_Visual_set, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Impairment_Visual_get", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Impairment_Visual_get, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Impairment_Heart_set", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Impairment_Heart_set, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Impairment_Heart_get", (swig_wrapper_func) _wrap_HDRTYPE_Patient_Impairment_Heart_get, NULL},
    { SWIG_prefix "new_HDRTYPE_Patient_Impairment", (swig_wrapper_func) _wrap_new_HDRTYPE_Patient_Impairment, NULL},
    { SWIG_prefix "delete_HDRTYPE_Patient_Impairment", (swig_wrapper_func) _wrap_delete_HDRTYPE_Patient_Impairment, NULL},
    { SWIG_prefix "HDRTYPE_Patient_Impairment", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_HDRTYPE_Patient_Impairment},
    { SWIG_prefix "HDRTYPE_data_size_set", (swig_wrapper_func) _wrap_HDRTYPE_data_size_set, NULL},
    { SWIG_prefix "HDRTYPE_data_size_get", (swig_wrapper_func) _wrap_HDRTYPE_data_size_get, NULL},
    { SWIG_prefix "HDRTYPE_data_block_set", (swig_wrapper_func) _wrap_HDRTYPE_data_block_set, NULL},
    { SWIG_prefix "HDRTYPE_data_block_get", (swig_wrapper_func) _wrap_HDRTYPE_data_block_get, NULL},
    { SWIG_prefix "new_HDRTYPE_data", (swig_wrapper_func) _wrap_new_HDRTYPE_data, NULL},
    { SWIG_prefix "delete_HDRTYPE_data", (swig_wrapper_func) _wrap_delete_HDRTYPE_data, NULL},
    { SWIG_prefix "HDRTYPE_data", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_HDRTYPE_data},
    { SWIG_prefix "constructHDR", (swig_wrapper_func) _wrap_constructHDR, NULL},
    { SWIG_prefix "destructHDR", (swig_wrapper_func) _wrap_destructHDR, NULL},
    { SWIG_prefix "sopen", (swig_wrapper_func) _wrap_sopen, NULL},
    { SWIG_prefix "sclose", (swig_wrapper_func) _wrap_sclose, NULL},
    { SWIG_prefix "sread", (swig_wrapper_func) _wrap_sread, NULL},
    { SWIG_prefix "swrite", (swig_wrapper_func) _wrap_swrite, NULL},
    { SWIG_prefix "seof", (swig_wrapper_func) _wrap_seof, NULL},
    { SWIG_prefix "srewind", (swig_wrapper_func) _wrap_srewind, NULL},
    { SWIG_prefix "sseek", (swig_wrapper_func) _wrap_sseek, NULL},
    { SWIG_prefix "stell", (swig_wrapper_func) _wrap_stell, NULL},
    { SWIG_prefix "RerefCHANNEL", (swig_wrapper_func) _wrap_RerefCHANNEL, NULL},
    { SWIG_prefix "GetFileTypeString", (swig_wrapper_func) _wrap_GetFileTypeString, NULL},
    { SWIG_prefix "sload", (swig_wrapper_func) _wrap_sload, NULL},
    { SWIG_prefix "PhysDimCode", (swig_wrapper_func) _wrap_PhysDimCode, NULL},
    { SWIG_prefix "PhysDim", (swig_wrapper_func) _wrap_PhysDim, NULL},
    { SWIG_prefix "sort_eventtable", (swig_wrapper_func) _wrap_sort_eventtable, NULL},
    { SWIG_prefix "convert2to4_eventtable", (swig_wrapper_func) _wrap_convert2to4_eventtable, NULL},
    { SWIG_prefix "convert4to2_eventtable", (swig_wrapper_func) _wrap_convert4to2_eventtable, NULL},
    { SWIG_prefix "hdr2ascii", (swig_wrapper_func) _wrap_hdr2ascii, NULL},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_CHANNEL_TYPE = {"_p_CHANNEL_TYPE", "CHANNEL_TYPE *", 0, 0, (void*)&_wrap_class_CHANNEL_TYPE, 0};
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HDRTYPE = {"_p_HDRTYPE", "HDRTYPE *", 0, 0, (void*)&_wrap_class_HDRTYPE, 0};
static swig_type_info _swigt__p_HDRTYPE_AS = {"_p_HDRTYPE_AS", "HDRTYPE_AS *", 0, 0, (void*)&_wrap_class_HDRTYPE_AS, 0};
static swig_type_info _swigt__p_HDRTYPE_ELEC = {"_p_HDRTYPE_ELEC", "HDRTYPE_ELEC *", 0, 0, (void*)&_wrap_class_HDRTYPE_ELEC, 0};
static swig_type_info _swigt__p_HDRTYPE_EVENT = {"_p_HDRTYPE_EVENT", "HDRTYPE_EVENT *", 0, 0, (void*)&_wrap_class_HDRTYPE_EVENT, 0};
static swig_type_info _swigt__p_HDRTYPE_FILE = {"_p_HDRTYPE_FILE", "HDRTYPE_FILE *", 0, 0, (void*)&_wrap_class_HDRTYPE_FILE, 0};
static swig_type_info _swigt__p_HDRTYPE_FLAG = {"_p_HDRTYPE_FLAG", "HDRTYPE_FLAG *", 0, 0, (void*)&_wrap_class_HDRTYPE_FLAG, 0};
static swig_type_info _swigt__p_HDRTYPE_ID = {"_p_HDRTYPE_ID", "HDRTYPE_ID *", 0, 0, (void*)&_wrap_class_HDRTYPE_ID, 0};
static swig_type_info _swigt__p_HDRTYPE_ID_Manufacturer = {"_p_HDRTYPE_ID_Manufacturer", "HDRTYPE_ID_Manufacturer *", 0, 0, (void*)&_wrap_class_HDRTYPE_ID_Manufacturer, 0};
static swig_type_info _swigt__p_HDRTYPE_Patient = {"_p_HDRTYPE_Patient", "HDRTYPE_Patient *", 0, 0, (void*)&_wrap_class_HDRTYPE_Patient, 0};
static swig_type_info _swigt__p_HDRTYPE_Patient_Impairment = {"_p_HDRTYPE_Patient_Impairment", "HDRTYPE_Patient_Impairment *", 0, 0, (void*)&_wrap_class_HDRTYPE_Patient_Impairment, 0};
static swig_type_info _swigt__p_HDRTYPE_data = {"_p_HDRTYPE_data", "HDRTYPE_data *", 0, 0, (void*)&_wrap_class_HDRTYPE_data, 0};
static swig_type_info _swigt__p_biosig_data_type = {"_p_biosig_data_type", "biosig_data_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imaxdiv_t = {"_p_imaxdiv_t", "imaxdiv_t *", 0, 0, (void*)&_wrap_class_imaxdiv_t, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|nrec_t *|long long *|gdf_time *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_biosig_data_type = {"_p_p_biosig_data_type", "biosig_data_type **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CHANNEL_TYPE,
  &_swigt__p_FILE,
  &_swigt__p_HDRTYPE,
  &_swigt__p_HDRTYPE_AS,
  &_swigt__p_HDRTYPE_ELEC,
  &_swigt__p_HDRTYPE_EVENT,
  &_swigt__p_HDRTYPE_FILE,
  &_swigt__p_HDRTYPE_FLAG,
  &_swigt__p_HDRTYPE_ID,
  &_swigt__p_HDRTYPE_ID_Manufacturer,
  &_swigt__p_HDRTYPE_Patient,
  &_swigt__p_HDRTYPE_Patient_Impairment,
  &_swigt__p_HDRTYPE_data,
  &_swigt__p_biosig_data_type,
  &_swigt__p_char,
  &_swigt__p_float,
  &_swigt__p_imaxdiv_t,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_p_biosig_data_type,
  &_swigt__p_p_char,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_CHANNEL_TYPE[] = {  {&_swigt__p_CHANNEL_TYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HDRTYPE[] = {  {&_swigt__p_HDRTYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HDRTYPE_AS[] = {  {&_swigt__p_HDRTYPE_AS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HDRTYPE_ELEC[] = {  {&_swigt__p_HDRTYPE_ELEC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HDRTYPE_EVENT[] = {  {&_swigt__p_HDRTYPE_EVENT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HDRTYPE_FILE[] = {  {&_swigt__p_HDRTYPE_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HDRTYPE_FLAG[] = {  {&_swigt__p_HDRTYPE_FLAG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HDRTYPE_ID[] = {  {&_swigt__p_HDRTYPE_ID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HDRTYPE_ID_Manufacturer[] = {  {&_swigt__p_HDRTYPE_ID_Manufacturer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HDRTYPE_Patient[] = {  {&_swigt__p_HDRTYPE_Patient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HDRTYPE_Patient_Impairment[] = {  {&_swigt__p_HDRTYPE_Patient_Impairment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HDRTYPE_data[] = {  {&_swigt__p_HDRTYPE_data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_biosig_data_type[] = {  {&_swigt__p_biosig_data_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imaxdiv_t[] = {  {&_swigt__p_imaxdiv_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_biosig_data_type[] = {  {&_swigt__p_p_biosig_data_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CHANNEL_TYPE,
  _swigc__p_FILE,
  _swigc__p_HDRTYPE,
  _swigc__p_HDRTYPE_AS,
  _swigc__p_HDRTYPE_ELEC,
  _swigc__p_HDRTYPE_EVENT,
  _swigc__p_HDRTYPE_FILE,
  _swigc__p_HDRTYPE_FLAG,
  _swigc__p_HDRTYPE_ID,
  _swigc__p_HDRTYPE_ID_Manufacturer,
  _swigc__p_HDRTYPE_Patient,
  _swigc__p_HDRTYPE_Patient_Impairment,
  _swigc__p_HDRTYPE_data,
  _swigc__p_biosig_data_type,
  _swigc__p_char,
  _swigc__p_float,
  _swigc__p_imaxdiv_t,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_p_biosig_data_type,
  _swigc__p_p_char,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  
  SWIGINTERN void
  SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
    int i;
    Tcl_Obj *obj;
    
    if (!swigconstTableinit) {
      Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
      swigconstTableinit = 1;
    }
    for (i = 0; constants[i].type; i++) {
      switch(constants[i].type) {
      case SWIG_TCL_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_TCL_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        SWIG_Tcl_SetConstantObj(interp, constants[i].name, obj);
      }
    }
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

SWIGEXPORT int SWIG_init(Tcl_Interp *interp) {
  int i;
  if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
  /* (char*) cast is required to avoid compiler warning/error for Tcl < 8.4. */
  if (Tcl_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif  
#ifdef USE_TK_STUBS
  /* (char*) cast is required to avoid compiler warning/error. */
  if (Tk_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif
  
  Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
  
#ifdef SWIG_namespace
  Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
  
  SWIG_InitializeModule((void *) interp);
  SWIG_PropagateClientData();
  
  for (i = 0; swig_commands[i].name; i++) {
    Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper,
      swig_commands[i].clientdata, NULL);
  }
  for (i = 0; swig_variables[i].name; i++) {
    Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
  }
  
  SWIG_Tcl_InstallConstants(interp, swig_constants);
  
  
  SWIG_Tcl_SetConstantObj(interp, "noFile", SWIG_From_int(static_cast< int >(noFile)));
  SWIG_Tcl_SetConstantObj(interp, "unknown", SWIG_From_int(static_cast< int >(unknown)));
  SWIG_Tcl_SetConstantObj(interp, "ABF", SWIG_From_int(static_cast< int >(ABF)));
  SWIG_Tcl_SetConstantObj(interp, "ACQ", SWIG_From_int(static_cast< int >(ACQ)));
  SWIG_Tcl_SetConstantObj(interp, "ACR_NEMA", SWIG_From_int(static_cast< int >(ACR_NEMA)));
  SWIG_Tcl_SetConstantObj(interp, "AIFC", SWIG_From_int(static_cast< int >(AIFC)));
  SWIG_Tcl_SetConstantObj(interp, "AIFF", SWIG_From_int(static_cast< int >(AIFF)));
  SWIG_Tcl_SetConstantObj(interp, "AINF", SWIG_From_int(static_cast< int >(AINF)));
  SWIG_Tcl_SetConstantObj(interp, "alpha", SWIG_From_int(static_cast< int >(alpha)));
  SWIG_Tcl_SetConstantObj(interp, "AU", SWIG_From_int(static_cast< int >(AU)));
  SWIG_Tcl_SetConstantObj(interp, "ASF", SWIG_From_int(static_cast< int >(ASF)));
  SWIG_Tcl_SetConstantObj(interp, "ATES", SWIG_From_int(static_cast< int >(ATES)));
  SWIG_Tcl_SetConstantObj(interp, "ATF", SWIG_From_int(static_cast< int >(ATF)));
  SWIG_Tcl_SetConstantObj(interp, "AVI", SWIG_From_int(static_cast< int >(AVI)));
  SWIG_Tcl_SetConstantObj(interp, "BCI2000", SWIG_From_int(static_cast< int >(BCI2000)));
  SWIG_Tcl_SetConstantObj(interp, "BDF", SWIG_From_int(static_cast< int >(BDF)));
  SWIG_Tcl_SetConstantObj(interp, "BIN", SWIG_From_int(static_cast< int >(BIN)));
  SWIG_Tcl_SetConstantObj(interp, "BKR", SWIG_From_int(static_cast< int >(BKR)));
  SWIG_Tcl_SetConstantObj(interp, "BLSC", SWIG_From_int(static_cast< int >(BLSC)));
  SWIG_Tcl_SetConstantObj(interp, "BMP", SWIG_From_int(static_cast< int >(BMP)));
  SWIG_Tcl_SetConstantObj(interp, "BNI", SWIG_From_int(static_cast< int >(BNI)));
  SWIG_Tcl_SetConstantObj(interp, "BSCS", SWIG_From_int(static_cast< int >(BSCS)));
  SWIG_Tcl_SetConstantObj(interp, "BrainVision", SWIG_From_int(static_cast< int >(BrainVision)));
  SWIG_Tcl_SetConstantObj(interp, "BrainVisionVAmp", SWIG_From_int(static_cast< int >(BrainVisionVAmp)));
  SWIG_Tcl_SetConstantObj(interp, "BrainVisionMarker", SWIG_From_int(static_cast< int >(BrainVisionMarker)));
  SWIG_Tcl_SetConstantObj(interp, "BZ2", SWIG_From_int(static_cast< int >(BZ2)));
  SWIG_Tcl_SetConstantObj(interp, "CDF", SWIG_From_int(static_cast< int >(CDF)));
  SWIG_Tcl_SetConstantObj(interp, "CFWB", SWIG_From_int(static_cast< int >(CFWB)));
  SWIG_Tcl_SetConstantObj(interp, "CNT", SWIG_From_int(static_cast< int >(CNT)));
  SWIG_Tcl_SetConstantObj(interp, "CTF", SWIG_From_int(static_cast< int >(CTF)));
  SWIG_Tcl_SetConstantObj(interp, "DICOM", SWIG_From_int(static_cast< int >(DICOM)));
  SWIG_Tcl_SetConstantObj(interp, "DEMG", SWIG_From_int(static_cast< int >(DEMG)));
  SWIG_Tcl_SetConstantObj(interp, "EBS", SWIG_From_int(static_cast< int >(EBS)));
  SWIG_Tcl_SetConstantObj(interp, "EDF", SWIG_From_int(static_cast< int >(EDF)));
  SWIG_Tcl_SetConstantObj(interp, "EEG1100", SWIG_From_int(static_cast< int >(EEG1100)));
  SWIG_Tcl_SetConstantObj(interp, "EEProbe", SWIG_From_int(static_cast< int >(EEProbe)));
  SWIG_Tcl_SetConstantObj(interp, "EEProbe2", SWIG_From_int(static_cast< int >(EEProbe2)));
  SWIG_Tcl_SetConstantObj(interp, "EEProbeAvr", SWIG_From_int(static_cast< int >(EEProbeAvr)));
  SWIG_Tcl_SetConstantObj(interp, "EGI", SWIG_From_int(static_cast< int >(EGI)));
  SWIG_Tcl_SetConstantObj(interp, "EGIS", SWIG_From_int(static_cast< int >(EGIS)));
  SWIG_Tcl_SetConstantObj(interp, "ELF", SWIG_From_int(static_cast< int >(ELF)));
  SWIG_Tcl_SetConstantObj(interp, "EMBLA", SWIG_From_int(static_cast< int >(EMBLA)));
  SWIG_Tcl_SetConstantObj(interp, "ET_MEG", SWIG_From_int(static_cast< int >(ET_MEG)));
  SWIG_Tcl_SetConstantObj(interp, "ETG4000", SWIG_From_int(static_cast< int >(ETG4000)));
  SWIG_Tcl_SetConstantObj(interp, "EVENT", SWIG_From_int(static_cast< int >(EVENT)));
  SWIG_Tcl_SetConstantObj(interp, "EXIF", SWIG_From_int(static_cast< int >(EXIF)));
  SWIG_Tcl_SetConstantObj(interp, "FAMOS", SWIG_From_int(static_cast< int >(FAMOS)));
  SWIG_Tcl_SetConstantObj(interp, "FEF", SWIG_From_int(static_cast< int >(FEF)));
  SWIG_Tcl_SetConstantObj(interp, "FITS", SWIG_From_int(static_cast< int >(FITS)));
  SWIG_Tcl_SetConstantObj(interp, "FLAC", SWIG_From_int(static_cast< int >(FLAC)));
  SWIG_Tcl_SetConstantObj(interp, "GDF", SWIG_From_int(static_cast< int >(GDF)));
  SWIG_Tcl_SetConstantObj(interp, "GDF1", SWIG_From_int(static_cast< int >(GDF1)));
  SWIG_Tcl_SetConstantObj(interp, "GIF", SWIG_From_int(static_cast< int >(GIF)));
  SWIG_Tcl_SetConstantObj(interp, "GTF", SWIG_From_int(static_cast< int >(GTF)));
  SWIG_Tcl_SetConstantObj(interp, "GZIP", SWIG_From_int(static_cast< int >(GZIP)));
  SWIG_Tcl_SetConstantObj(interp, "HDF", SWIG_From_int(static_cast< int >(HDF)));
  SWIG_Tcl_SetConstantObj(interp, "HL7aECG", SWIG_From_int(static_cast< int >(HL7aECG)));
  SWIG_Tcl_SetConstantObj(interp, "JPEG", SWIG_From_int(static_cast< int >(JPEG)));
  SWIG_Tcl_SetConstantObj(interp, "Lexicor", SWIG_From_int(static_cast< int >(Lexicor)));
  SWIG_Tcl_SetConstantObj(interp, "Matlab", SWIG_From_int(static_cast< int >(Matlab)));
  SWIG_Tcl_SetConstantObj(interp, "MFER", SWIG_From_int(static_cast< int >(MFER)));
  SWIG_Tcl_SetConstantObj(interp, "MIDI", SWIG_From_int(static_cast< int >(MIDI)));
  SWIG_Tcl_SetConstantObj(interp, "MIT", SWIG_From_int(static_cast< int >(MIT)));
  SWIG_Tcl_SetConstantObj(interp, "MM", SWIG_From_int(static_cast< int >(MM)));
  SWIG_Tcl_SetConstantObj(interp, "MSI", SWIG_From_int(static_cast< int >(MSI)));
  SWIG_Tcl_SetConstantObj(interp, "native", SWIG_From_int(static_cast< int >(native)));
  SWIG_Tcl_SetConstantObj(interp, "NetCDF", SWIG_From_int(static_cast< int >(NetCDF)));
  SWIG_Tcl_SetConstantObj(interp, "NEX1", SWIG_From_int(static_cast< int >(NEX1)));
  SWIG_Tcl_SetConstantObj(interp, "NIFTI", SWIG_From_int(static_cast< int >(NIFTI)));
  SWIG_Tcl_SetConstantObj(interp, "OGG", SWIG_From_int(static_cast< int >(OGG)));
  SWIG_Tcl_SetConstantObj(interp, "OpenXDF", SWIG_From_int(static_cast< int >(OpenXDF)));
  SWIG_Tcl_SetConstantObj(interp, "PBMA", SWIG_From_int(static_cast< int >(PBMA)));
  SWIG_Tcl_SetConstantObj(interp, "PBMN", SWIG_From_int(static_cast< int >(PBMN)));
  SWIG_Tcl_SetConstantObj(interp, "PDF", SWIG_From_int(static_cast< int >(PDF)));
  SWIG_Tcl_SetConstantObj(interp, "PDP", SWIG_From_int(static_cast< int >(PDP)));
  SWIG_Tcl_SetConstantObj(interp, "Persyst", SWIG_From_int(static_cast< int >(Persyst)));
  SWIG_Tcl_SetConstantObj(interp, "PGMA", SWIG_From_int(static_cast< int >(PGMA)));
  SWIG_Tcl_SetConstantObj(interp, "PGMB", SWIG_From_int(static_cast< int >(PGMB)));
  SWIG_Tcl_SetConstantObj(interp, "PLEXON", SWIG_From_int(static_cast< int >(PLEXON)));
  SWIG_Tcl_SetConstantObj(interp, "PNG", SWIG_From_int(static_cast< int >(PNG)));
  SWIG_Tcl_SetConstantObj(interp, "PNM", SWIG_From_int(static_cast< int >(PNM)));
  SWIG_Tcl_SetConstantObj(interp, "POLY5", SWIG_From_int(static_cast< int >(POLY5)));
  SWIG_Tcl_SetConstantObj(interp, "PPMA", SWIG_From_int(static_cast< int >(PPMA)));
  SWIG_Tcl_SetConstantObj(interp, "PPMB", SWIG_From_int(static_cast< int >(PPMB)));
  SWIG_Tcl_SetConstantObj(interp, "PS", SWIG_From_int(static_cast< int >(PS)));
  SWIG_Tcl_SetConstantObj(interp, "RIFF", SWIG_From_int(static_cast< int >(RIFF)));
  SWIG_Tcl_SetConstantObj(interp, "SCP_ECG", SWIG_From_int(static_cast< int >(SCP_ECG)));
  SWIG_Tcl_SetConstantObj(interp, "SIGIF", SWIG_From_int(static_cast< int >(SIGIF)));
  SWIG_Tcl_SetConstantObj(interp, "Sigma", SWIG_From_int(static_cast< int >(Sigma)));
  SWIG_Tcl_SetConstantObj(interp, "SMA", SWIG_From_int(static_cast< int >(SMA)));
  SWIG_Tcl_SetConstantObj(interp, "SND", SWIG_From_int(static_cast< int >(SND)));
  SWIG_Tcl_SetConstantObj(interp, "SVG", SWIG_From_int(static_cast< int >(SVG)));
  SWIG_Tcl_SetConstantObj(interp, "SXI", SWIG_From_int(static_cast< int >(SXI)));
  SWIG_Tcl_SetConstantObj(interp, "TIFF", SWIG_From_int(static_cast< int >(TIFF)));
  SWIG_Tcl_SetConstantObj(interp, "TMS32", SWIG_From_int(static_cast< int >(TMS32)));
  SWIG_Tcl_SetConstantObj(interp, "TMSiLOG", SWIG_From_int(static_cast< int >(TMSiLOG)));
  SWIG_Tcl_SetConstantObj(interp, "TRC", SWIG_From_int(static_cast< int >(TRC)));
  SWIG_Tcl_SetConstantObj(interp, "UNIPRO", SWIG_From_int(static_cast< int >(UNIPRO)));
  SWIG_Tcl_SetConstantObj(interp, "VRML", SWIG_From_int(static_cast< int >(VRML)));
  SWIG_Tcl_SetConstantObj(interp, "VTK", SWIG_From_int(static_cast< int >(VTK)));
  SWIG_Tcl_SetConstantObj(interp, "WAV", SWIG_From_int(static_cast< int >(WAV)));
  SWIG_Tcl_SetConstantObj(interp, "WinEEG", SWIG_From_int(static_cast< int >(WinEEG)));
  SWIG_Tcl_SetConstantObj(interp, "WMF", SWIG_From_int(static_cast< int >(WMF)));
  SWIG_Tcl_SetConstantObj(interp, "XML", SWIG_From_int(static_cast< int >(XML)));
  SWIG_Tcl_SetConstantObj(interp, "XPM", SWIG_From_int(static_cast< int >(XPM)));
  SWIG_Tcl_SetConstantObj(interp, "Z", SWIG_From_int(static_cast< int >(Z)));
  SWIG_Tcl_SetConstantObj(interp, "ZIP", SWIG_From_int(static_cast< int >(ZIP)));
  SWIG_Tcl_SetConstantObj(interp, "ZIP2", SWIG_From_int(static_cast< int >(ZIP2)));
  SWIG_Tcl_SetConstantObj(interp, "ASCII_IBI", SWIG_From_int(static_cast< int >(ASCII_IBI)));
  SWIG_Tcl_SetConstantObj(interp, "ASCII", SWIG_From_int(static_cast< int >(ASCII)));
  return TCL_OK;
}
SWIGEXPORT int Biosig_SafeInit(Tcl_Interp *interp) {
  return SWIG_init(interp);
}

